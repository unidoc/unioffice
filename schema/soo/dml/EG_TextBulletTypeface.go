// Copyright 2017 Baliance. All rights reserved.
//
// DO NOT EDIT: generated by gooxml ECMA-376 generator
//
// Use of this source code is governed by the terms of the Affero GNU General
// Public License version 3.0 as published by the Free Software Foundation and
// appearing in the file LICENSE included in the packaging of this file. A
// commercial license can be purchased by contacting sales@baliance.com.

package dml

import (
	"encoding/xml"

	"baliance.com/gooxml"
)

type EG_TextBulletTypeface struct {
	BuFontTx *CT_TextBulletTypefaceFollowText
	BuFont   *CT_TextFont
}

func NewEG_TextBulletTypeface() *EG_TextBulletTypeface {
	ret := &EG_TextBulletTypeface{}
	return ret
}

func (m *EG_TextBulletTypeface) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if m.BuFontTx != nil {
		sebuFontTx := xml.StartElement{Name: xml.Name{Local: "a:buFontTx"}}
		e.EncodeElement(m.BuFontTx, sebuFontTx)
	}
	if m.BuFont != nil {
		sebuFont := xml.StartElement{Name: xml.Name{Local: "a:buFont"}}
		e.EncodeElement(m.BuFont, sebuFont)
	}
	return nil
}

func (m *EG_TextBulletTypeface) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	// initialize to default
lEG_TextBulletTypeface:
	for {
		tok, err := d.Token()
		if err != nil {
			return err
		}
		switch el := tok.(type) {
		case xml.StartElement:
			switch el.Name {
			case xml.Name{Space: "http://schemas.openxmlformats.org/drawingml/2006/main", Local: "buFontTx"},
				xml.Name{Space: "http://purl.oclc.org/ooxml/drawingml/main", Local: "buFontTx"}:
				m.BuFontTx = NewCT_TextBulletTypefaceFollowText()
				if err := d.DecodeElement(m.BuFontTx, &el); err != nil {
					return err
				}
			case xml.Name{Space: "http://schemas.openxmlformats.org/drawingml/2006/main", Local: "buFont"},
				xml.Name{Space: "http://purl.oclc.org/ooxml/drawingml/main", Local: "buFont"}:
				m.BuFont = NewCT_TextFont()
				if err := d.DecodeElement(m.BuFont, &el); err != nil {
					return err
				}
			default:
				gooxml.Log("skipping unsupported element on EG_TextBulletTypeface %v", el.Name)
				if err := d.Skip(); err != nil {
					return err
				}
			}
		case xml.EndElement:
			break lEG_TextBulletTypeface
		case xml.CharData:
		}
	}
	return nil
}

// Validate validates the EG_TextBulletTypeface and its children
func (m *EG_TextBulletTypeface) Validate() error {
	return m.ValidateWithPath("EG_TextBulletTypeface")
}

// ValidateWithPath validates the EG_TextBulletTypeface and its children, prefixing error messages with path
func (m *EG_TextBulletTypeface) ValidateWithPath(path string) error {
	if m.BuFontTx != nil {
		if err := m.BuFontTx.ValidateWithPath(path + "/BuFontTx"); err != nil {
			return err
		}
	}
	if m.BuFont != nil {
		if err := m.BuFont.ValidateWithPath(path + "/BuFont"); err != nil {
			return err
		}
	}
	return nil
}
