//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package wildcard ;func _df (_fg ,_bb []rune ,_cb bool )bool {for len (_bb )> 0{switch _bb [0]{default:if len (_fg )==0||_fg [0]!=_bb [0]{return false ;};case '?':if len (_fg )==0&&!_cb {return false ;};case '*':return _df (_fg ,_bb [1:],_cb )||(len (_fg )> 0&&_df (_fg [1:],_bb ,_cb ));
};_fg =_fg [1:];_bb =_bb [1:];};return len (_fg )==0&&len (_bb )==0;};func Match (pattern ,name string )(_bd bool ){if pattern ==""{return name ==pattern ;};if pattern =="\u002a"{return true ;};_f :=make ([]rune ,0,len (name ));_dec :=make ([]rune ,0,len (pattern ));
for _ ,_ef :=range name {_f =append (_f ,_ef );};for _ ,_bc :=range pattern {_dec =append (_dec ,_bc );};_bg :=false ;return _df (_f ,_dec ,_bg );};func Index (pattern ,name string )(_ad int ){if pattern ==""||pattern =="\u002a"{return 0;};_fd :=make ([]rune ,0,len (name ));
_beg :=make ([]rune ,0,len (pattern ));for _ ,_dc :=range name {_fd =append (_fd ,_dc );};for _ ,_cd :=range pattern {_beg =append (_beg ,_cd );};return _fc (_fd ,_beg ,0);};func _fc (_aa ,_cbb []rune ,_ee int )int {for len (_cbb )> 0{switch _cbb [0]{default:if len (_aa )==0{return -1;
};if _aa [0]!=_cbb [0]{return _fc (_aa [1:],_cbb ,_ee +1);};case '?':if len (_aa )==0{return -1;};case '*':if len (_aa )==0{return -1;};_fe :=_fc (_aa ,_cbb [1:],_ee );if _fe !=-1{return _ee ;}else {_fe =_fc (_aa [1:],_cbb ,_ee );if _fe !=-1{return _ee ;
}else {return -1;};};};_aa =_aa [1:];_cbb =_cbb [1:];};return _ee ;};func MatchSimple (pattern ,name string )bool {if pattern ==""{return name ==pattern ;};if pattern =="\u002a"{return true ;};_c :=make ([]rune ,0,len (name ));_be :=make ([]rune ,0,len (pattern ));
for _ ,_d :=range name {_c =append (_c ,_d );};for _ ,_ce :=range pattern {_be =append (_be ,_ce );};_eg :=true ;return _df (_c ,_be ,_eg );};