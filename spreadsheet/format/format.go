//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package format provides support for parsing and evaluating
// spreadsheetml/Excel number formats.
//
// Internally spreadsheets store numbers and dates values as a text
// representation of a floating point number (e.g. 1.2345).  This number is then
// displayed in Excel or another spreadsheet viewer differently depending on the
// number fornat of the cell style applied to the cell.
//
// As an example, the same value of 1.2345 can be displayed as:
// - "1" with format "0"
// - "1.2" with format "0.0"
// - "1.23" with format "0.00"
// - "1.235" with format "0.000"
// - "123%" with format "0%"
// - "1 23/100" with fornat "0 0/100"
// - "1.23E+00" with format "0.00E+00"
// - "29:37:41s" with format `[h]:mm:ss"s"`
package format ;import (_ca "bytes";_a "fmt";_f "github.com/unidoc/unioffice/common/logger";_b "io";_e "math";_bb "strconv";_d "strings";_cc "time";);type Lexer struct{_dbd Format ;_bbf []Format ;};const _ggfa int =-1;func _ace (_eed float64 )string {_ba :=_bb .FormatFloat (_eed ,'E',-1,64);
_dgba :=_bb .FormatFloat (_eed ,'E',5,64);if len (_ba )< len (_dgba ){return _bb .FormatFloat (_eed ,'E',2,64);};return _dgba ;};func _ae (_bfa ,_fag float64 ,_dfg Format )[]byte {if len (_dfg .Whole )==0{return nil ;};_afe :=_cc .Date (1899,12,30,0,0,0,0,_cc .UTC );
_abb :=_afe .Add (_cc .Duration (_fag *float64 (24*_cc .Hour )));_abb =_gec (_abb );_dgf :=_bb .AppendFloat (nil ,_bfa ,'f',-1,64);_cac :=make ([]byte ,0,len (_dgf ));_dgc :=0;_cfe :=1;_ea :for _bba :=len (_dfg .Whole )-1;_bba >=0;_bba --{_agc :=len (_dgf )-1-_dgc ;
_ccac :=_dfg .Whole [_bba ];switch _ccac .Type {case FmtTypeDigit :if _agc >=0{_cac =append (_cac ,_dgf [_agc ]);_dgc ++;_cfe =_bba ;}else {_cac =append (_cac ,'0');};case FmtTypeDigitOpt :if _agc >=0{_cac =append (_cac ,_dgf [_agc ]);_dgc ++;_cfe =_bba ;
}else {for _fdb :=_bba ;_fdb >=0;_fdb --{_ge :=_dfg .Whole [_fdb ];if _ge .Type ==FmtTypeLiteral {_cac =append (_cac ,_ge .Literal );};};break _ea ;};case FmtTypeDollar :for _gcc :=_dgc ;_gcc < len (_dgf );_gcc ++{_cac =append (_cac ,_dgf [len (_dgf )-1-_gcc ]);
_dgc ++;};_cac =append (_cac ,'$');case FmtTypeComma :if !_dfg ._gg {_cac =append (_cac ,',');};case FmtTypeLiteral :_cac =append (_cac ,_ccac .Literal );case FmtTypeDate :_cac =append (_cac ,_aa (_dcd (_abb ,_ccac .DateTime ))...);case FmtTypeTime :_cac =append (_cac ,_aa (_bgeg (_abb ,_fag ,_ccac .DateTime ))...);
default:_f .Log .Debug ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070e\u0020i\u006e\u0020\u0077\u0068\u006f\u006c\u0065 \u0025\u0076",_ccac );};};_ccag :=_aa (_cac );if _dgc < len (_dgf )&&(_dgc !=0||_dfg ._dgg ){_ecc :=len (_dgf )-_dgc ;
_de :=make ([]byte ,len (_ccag )+_ecc );copy (_de ,_ccag [0:_cfe ]);copy (_de [_cfe :],_dgf [0:]);copy (_de [_cfe +_ecc :],_ccag [_cfe :]);_ccag =_de ;};if _dfg ._gg {_bbg :=_ca .Buffer {};_abba :=0;for _dbe :=len (_ccag )-1;_dbe >=0;_dbe --{if !(_ccag [_dbe ]>='0'&&_ccag [_dbe ]<='9'){_abba ++;
}else {break ;};};for _gfd :=0;_gfd < len (_ccag );_gfd ++{_ceg :=(len (_ccag )-_gfd -_abba );if _ceg %3==0&&_ceg !=0&&_gfd !=0{_bbg .WriteByte (',');};_bbg .WriteByte (_ccag [_gfd ]);};_ccag =_bbg .Bytes ();};return _ccag ;};

// Token is a format token in the Excel format string.
type Token struct{Type FmtType ;Literal byte ;DateTime string ;};

// String returns the string formatted according to the type.  In format strings
// this is the fourth item, where '@' is used as a placeholder for text.
func String (v string ,f string )string {_bg :=Parse (f );var _fda Format ;if len (_bg )==1{_fda =_bg [0];}else if len (_bg )==4{_fda =_bg [3];};_ee :=false ;for _ ,_ec :=range _fda .Whole {if _ec .Type ==FmtTypeText {_ee =true ;};};if !_ee {return v ;
};_bc :=_ca .Buffer {};for _ ,_cgd :=range _fda .Whole {switch _cgd .Type {case FmtTypeLiteral :_bc .WriteByte (_cgd .Literal );case FmtTypeText :_bc .WriteString (v );};};return _bc .String ();};func _bgeg (_bbd _cc .Time ,_eec float64 ,_acc string )[]byte {_dfa :=[]byte {};
_age :=0;for _ccd :=0;_ccd < len (_acc );_ccd ++{var _dfb string ;if _acc [_ccd ]==':'{_dfb =string (_acc [_age :_ccd ]);_age =_ccd +1;}else if _ccd ==len (_acc )-1{_dfb =string (_acc [_age :_ccd +1]);}else {continue ;};switch _dfb {case "\u0064":_dfa =_bbd .AppendFormat (_dfa ,"\u0032");
case "\u0068":_dfa =_bbd .AppendFormat (_dfa ,"\u0033");case "\u0068\u0068":_dfa =_bbd .AppendFormat (_dfa ,"\u0031\u0035");case "\u006d":_dfa =_bbd .AppendFormat (_dfa ,"\u0034");case "\u006d\u006d":_dfa =_bbd .AppendFormat (_dfa ,"\u0030\u0034");case "\u0073":_dfa =_bbd .Round (_cc .Second ).AppendFormat (_dfa ,"\u0035");
case "\u0073\u002e\u0030":_dfa =_bbd .Round (_cc .Second /10).AppendFormat (_dfa ,"\u0035\u002e\u0030");case "\u0073\u002e\u0030\u0030":_dfa =_bbd .Round (_cc .Second /100).AppendFormat (_dfa ,"\u0035\u002e\u0030\u0030");case "\u0073\u002e\u00300\u0030":_dfa =_bbd .Round (_cc .Second /1000).AppendFormat (_dfa ,"\u0035\u002e\u00300\u0030");
case "\u0073\u0073":_dfa =_bbd .Round (_cc .Second ).AppendFormat (_dfa ,"\u0030\u0035");case "\u0073\u0073\u002e\u0030":_dfa =_bbd .Round (_cc .Second /10).AppendFormat (_dfa ,"\u0030\u0035\u002e\u0030");case "\u0073\u0073\u002e0\u0030":_dfa =_bbd .Round (_cc .Second /100).AppendFormat (_dfa ,"\u0030\u0035\u002e0\u0030");
case "\u0073\u0073\u002e\u0030\u0030\u0030":_dfa =_bbd .Round (_cc .Second /1000).AppendFormat (_dfa ,"\u0030\u0035\u002e\u0030\u0030\u0030");case "\u0041\u004d\u002fP\u004d":_dfa =_bbd .AppendFormat (_dfa ,"\u0050\u004d");case "\u005b\u0068\u005d":_dfa =_bb .AppendInt (_dfa ,int64 (_eec *24),10);
case "\u005b\u006d\u005d":_dfa =_bb .AppendInt (_dfa ,int64 (_eec *24*60),10);case "\u005b\u0073\u005d":_dfa =_bb .AppendInt (_dfa ,int64 (_eec *24*60*60),10);case "":default:_f .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0069\u006d\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_dfb );
};if _acc [_ccd ]==':'{_dfa =append (_dfa ,':');};};return _dfa ;};const _cfaa int =34;func _gec (_fgg _cc .Time )_cc .Time {_fgg =_fgg .UTC ();return _cc .Date (_fgg .Year (),_fgg .Month (),_fgg .Day (),_fgg .Hour (),_fgg .Minute (),_fgg .Second (),_fgg .Nanosecond (),_cc .Local );
};func _aafe (_dac ,_geb float64 ,_bdg Format )[]byte {if len (_bdg .Fractional )==0{return nil ;};_gcd :=_bb .AppendFloat (nil ,_dac ,'f',-1,64);if len (_gcd )> 2{_gcd =_gcd [2:];}else {_gcd =nil ;};_cfa :=make ([]byte ,0,len (_gcd ));_cfa =append (_cfa ,'.');
_fb :=0;_eff :for _eb :=0;_eb < len (_bdg .Fractional );_eb ++{_fdf :=_eb ;_ggf :=_bdg .Fractional [_eb ];switch _ggf .Type {case FmtTypeDigit :if _fdf < len (_gcd ){_cfa =append (_cfa ,_gcd [_fdf ]);_fb ++;}else {_cfa =append (_cfa ,'0');};case FmtTypeDigitOpt :if _fdf >=0{_cfa =append (_cfa ,_gcd [_fdf ]);
_fb ++;}else {break _eff ;};case FmtTypeLiteral :_cfa =append (_cfa ,_ggf .Literal );default:_f .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070o\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020f\u0072\u0061\u0063\u0074\u0069\u006f\u006ea\u006c\u0020\u0025\u0076",_ggf );
};};return _cfa ;};const _dbb int =-1;const _cg =1e-10;const _caaa int =34;func _dcd (_gaa _cc .Time ,_bfc string )[]byte {_bbga :=[]byte {};_cag :=0;for _bge :=0;_bge < len (_bfc );_bge ++{var _fga string ;if _bfc [_bge ]=='/'{_fga =string (_bfc [_cag :_bge ]);
_cag =_bge +1;}else if _bge ==len (_bfc )-1{_fga =string (_bfc [_cag :_bge +1]);}else {continue ;};switch _fga {case "\u0079\u0079":_bbga =_gaa .AppendFormat (_bbga ,"\u0030\u0036");case "\u0079\u0079\u0079\u0079":_bbga =_gaa .AppendFormat (_bbga ,"\u0032\u0030\u0030\u0036");
case "\u006d":_bbga =_gaa .AppendFormat (_bbga ,"\u0031");case "\u006d\u006d":_bbga =_gaa .AppendFormat (_bbga ,"\u0030\u0031");case "\u006d\u006d\u006d":_bbga =_gaa .AppendFormat (_bbga ,"\u004a\u0061\u006e");case "\u006d\u006d\u006d\u006d":_bbga =_gaa .AppendFormat (_bbga ,"\u004aa\u006e\u0075\u0061\u0072\u0079");
case "\u006d\u006d\u006dm\u006d":switch _gaa .Month (){case _cc .January ,_cc .July ,_cc .June :_bbga =append (_bbga ,'J');case _cc .February :_bbga =append (_bbga ,'M');case _cc .March ,_cc .May :_bbga =append (_bbga ,'M');case _cc .April ,_cc .August :_bbga =append (_bbga ,'A');
case _cc .September :_bbga =append (_bbga ,'S');case _cc .October :_bbga =append (_bbga ,'O');case _cc .November :_bbga =append (_bbga ,'N');case _cc .December :_bbga =append (_bbga ,'D');};case "\u0064":_bbga =_gaa .AppendFormat (_bbga ,"\u0032");case "\u0064\u0064":_bbga =_gaa .AppendFormat (_bbga ,"\u0030\u0032");
case "\u0064\u0064\u0064":_bbga =_gaa .AppendFormat (_bbga ,"\u004d\u006f\u006e");case "\u0064\u0064\u0064\u0064":_bbga =_gaa .AppendFormat (_bbga ,"\u004d\u006f\u006e\u0064\u0061\u0079");default:_f .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_fga );
};if _bfc [_bge ]=='/'{_bbga =append (_bbga ,'/');};};return _bbga ;};const _cd =1e11;

// NumberGeneric formats the number with the generic format which attemps to
// mimic Excel's general formatting.
func NumberGeneric (v float64 )string {if _e .Abs (v )>=_cd ||_e .Abs (v )<=_cg &&v !=0{return _ace (v );};_beg :=make ([]byte ,0,15);_beg =_bb .AppendFloat (_beg ,v ,'f',-1,64);if len (_beg )> 11{_bcc :=_beg [11]-'0';if _bcc >=5&&_bcc <=9{_beg [10]++;
_beg =_beg [0:11];_beg =_cegcd (_beg );};_beg =_beg [0:11];}else if len (_beg )==11{if _beg [len (_beg )-1]=='9'{_beg [len (_beg )-1]++;_beg =_cegcd (_beg );};};_beg =_dcf (_beg );return string (_beg );};

// Format is a parsed number format.
type Format struct{Whole []Token ;Fractional []Token ;Exponent []Token ;IsExponential bool ;_caa bool ;_cgf bool ;_fc bool ;_gg bool ;_df bool ;_dgg bool ;_ab int64 ;_be int ;};const _fe int =0;

// AddToken adds a format token to the format.
func (_fce *Format )AddToken (t FmtType ,l []byte ){if _fce ._df {_fce ._df =false ;return ;};switch t {case FmtTypeDecimal :_fce ._dgg =true ;case FmtTypeUnderscore :_fce ._df =true ;case FmtTypeText :_fce .Whole =append (_fce .Whole ,Token {Type :t });
case FmtTypeDate ,FmtTypeTime :_fce .Whole =append (_fce .Whole ,Token {Type :t ,DateTime :string (l )});case FmtTypePercent :_fce ._cgf =true ;t =FmtTypeLiteral ;l =[]byte {'%'};fallthrough;case FmtTypeDigitOpt :fallthrough;case FmtTypeLiteral ,FmtTypeDigit ,FmtTypeDollar ,FmtTypeComma :if l ==nil {l =[]byte {0};
};for _ ,_dd :=range l {if _fce .IsExponential {_fce .Exponent =append (_fce .Exponent ,Token {Type :t ,Literal :_dd });}else if !_fce ._dgg {_fce .Whole =append (_fce .Whole ,Token {Type :t ,Literal :_dd });}else {_fce .Fractional =append (_fce .Fractional ,Token {Type :t ,Literal :_dd });
};};case FmtTypeDigitOptThousands :_fce ._gg =true ;case FmtTypeFraction :_fd :=_d .Split (string (l ),"\u002f");if len (_fd )==2{_fce ._caa =true ;_fce ._ab ,_ =_bb .ParseInt (_fd [1],10,64);for _ ,_dff :=range _fd [1]{if _dff =='?'||_dff =='0'{_fce ._be ++;
};};};default:_f .Log .Debug ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0070\u0068\u0020\u0074y\u0070\u0065\u0020\u0069\u006e\u0020\u0070\u0061\u0072\u0073\u0065\u0020\u0025\u0076",t );};};func _dcf (_ga []byte )[]byte {_cegc :=len (_ga );
_fg :=false ;_ccg :=false ;for _ddc :=len (_ga )-1;_ddc >=0;_ddc --{if _ga [_ddc ]=='0'&&!_ccg &&!_fg {_cegc =_ddc ;}else if _ga [_ddc ]=='.'{_fg =true ;}else {_ccg =true ;};};if _fg &&_ccg {if _ga [_cegc -1]=='.'{_cegc --;};return _ga [0:_cegc ];};return _ga ;
};

// Number is used to format a number with a format string.  If the format
// string is empty, then General number formatting is used which attempts to mimic
// Excel's general formatting.
func Number (v float64 ,f string )string {if f ==""||f =="\u0047e\u006e\u0065\u0072\u0061\u006c"||f =="\u0040"{return NumberGeneric (v );};_gf :=Parse (f );if len (_gf )==1{return _ceb (v ,_gf [0],false );}else if len (_gf )> 1&&v < 0{return _ceb (v ,_gf [1],true );
}else if len (_gf )> 2&&v ==0{return _ceb (v ,_gf [2],false );};return _ceb (v ,_gf [0],false );};func _aa (_ce []byte )[]byte {for _bf :=0;_bf < len (_ce )/2;_bf ++{_ff :=len (_ce )-1-_bf ;_ce [_bf ],_ce [_ff ]=_ce [_ff ],_ce [_bf ];};return _ce ;};const _geg int =0;
func _ceb (_cca float64 ,_fa Format ,_cfb bool )string {if _fa ._fc {return NumberGeneric (_cca );};_aaf :=make ([]byte ,0,20);_da :=_e .Signbit (_cca );_bd :=_e .Abs (_cca );_eeg :=int64 (0);_cga :=int64 (0);if _fa .IsExponential {for _bd >=10{_cga ++;
_bd /=10;};for _bd < 1{_cga --;_bd *=10;};}else if _fa ._cgf {_bd *=100;}else if _fa ._caa {if _fa ._ab ==0{_af :=_e .Pow (10,float64 (_fa ._be ));_gff ,_dc :=1.0,1.0;_ =_gff ;for _ef :=1.0;_ef < _af ;_ef ++{_ ,_bfb :=_e .Modf (_bd *float64 (_ef ));if _bfb < _dc {_dc =_bfb ;
_gff =_ef ;if _bfb ==0{break ;};};};_fa ._ab =int64 (_gff );};_eeg =int64 (_bd *float64 (_fa ._ab )+0.5);if len (_fa .Whole )> 0&&_eeg > _fa ._ab {_eeg =int64 (_bd *float64 (_fa ._ab ))%_fa ._ab ;_bd -=float64 (_eeg )/float64 (_fa ._ab );}else {_bd -=float64 (_eeg )/float64 (_fa ._ab );
if _e .Abs (_bd )< 1{_cb :=true ;for _ ,_db :=range _fa .Whole {if _db .Type ==FmtTypeDigitOpt {continue ;};if _db .Type ==FmtTypeLiteral &&_db .Literal ==' '{continue ;};_cb =false ;};if _cb {_fa .Whole =nil ;};};};};_gcb :=1;for _ ,_ffe :=range _fa .Fractional {if _ffe .Type ==FmtTypeDigit ||_ffe .Type ==FmtTypeDigitOpt {_gcb ++;
};};_bd +=5*_e .Pow10 (-_gcb );_dga ,_caag :=_e .Modf (_bd );_aaf =append (_aaf ,_ae (_dga ,_cca ,_fa )...);_aaf =append (_aaf ,_aafe (_caag ,_cca ,_fa )...);_aaf =append (_aaf ,_ada (_cga ,_fa )...);if _fa ._caa {_aaf =_bb .AppendInt (_aaf ,_eeg ,10);
_aaf =append (_aaf ,'/');_aaf =_bb .AppendInt (_aaf ,_fa ._ab ,10);};if !_cfb &&_da {return "\u002d"+string (_aaf );};return string (_aaf );};const _cdb int =0;func _dgb (_bff int64 )int64 {if _bff < 0{return -_bff ;};return _bff ;};func (_cf FmtType )String ()string {if _cf >=FmtType (len (_dg )-1){return _a .Sprintf ("F\u006d\u0074\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_cf );
};return _g [_dg [_cf ]:_dg [_cf +1]];};const _g ="\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0074\u0065\u0072a\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0069\u0067\u0069\u0074\u0046\u006d\u0074\u0054y\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0043o\u006d\u006d\u0061\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0065\u0063\u0069\u006da\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065Pe\u0072\u0063e\u006e\u0074\u0046\u006d\u0074\u0054\u0079\u0070e\u0044\u006f\u006c\u006c\u0061\u0072\u0046\u006d\u0074Ty\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0054\u0068\u006f\u0075\u0073\u0061n\u0064\u0073\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0055n\u0064\u0065\u0072\u0073c\u006f\u0072\u0065\u0046\u006d\u0074T\u0079\u0070\u0065\u0044\u0061\u0074\u0065\u0046\u006d\u0074\u0054y\u0070e\u0054\u0069\u006d\u0065\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0046\u0072\u0061\u0063t\u0069\u006f\u006e\u0046\u006dt\u0054\u0079\u0070\u0065\u0054e\u0078\u0074";
func (_fcef *Lexer )Lex (r _b .Reader ){_bfd ,_aeb ,_cegg :=0,0,0;_efd :=-1;_cea ,_gcdd ,_eea :=0,0,0;_ =_gcdd ;_ =_eea ;_bcd :=1;_ =_bcd ;_bga :=make ([]byte ,4096);_agcc :=false ;for !_agcc {_eae :=0;if _cea > 0{_eae =_aeb -_cea ;};_aeb =0;_aebb ,_fbc :=r .Read (_bga [_eae :]);
if _aebb ==0||_fbc !=nil {_agcc =true ;};_cegg =_aebb +_eae ;if _cegg < len (_bga ){_efd =_cegg ;};{_bfd =_caaa ;_cea =0;_gcdd =0;_eea =0;};{if _aeb ==_cegg {goto _fef ;};switch _bfd {case 34:goto _daef ;case 35:goto _eeae ;case 0:goto _ebe ;case 36:goto _fab ;
case 37:goto _gfb ;case 1:goto _agg ;case 2:goto _aebc ;case 38:goto _cgb ;case 3:goto _eeda ;case 4:goto _bcb ;case 39:goto _ggd ;case 5:goto _daf ;case 6:goto _fcg ;case 7:goto _dbec ;case 8:goto _cfac ;case 40:goto _edf ;case 9:goto _fca ;case 41:goto _babf ;
case 10:goto _bdc ;case 42:goto _dfed ;case 11:goto _acf ;case 43:goto _cfgc ;case 44:goto _dag ;case 45:goto _eba ;case 12:goto _ege ;case 46:goto _cbd ;case 13:goto _fdff ;case 14:goto _dfef ;case 15:goto _bdae ;case 16:goto _dbbg ;case 47:goto _cgcd ;
case 17:goto _bbcd ;case 48:goto _fbf ;case 18:goto _egg ;case 19:goto _bce ;case 20:goto _dbdb ;case 49:goto _cab ;case 50:goto _ccagf ;case 21:goto _cbdg ;case 22:goto _baa ;case 23:goto _eaa ;case 24:goto _adc ;case 25:goto _fcd ;case 51:goto _cbgf ;
case 26:goto _cgab ;case 52:goto _fgf ;case 53:goto _dcb ;case 54:goto _bedf ;case 55:goto _efbg ;case 56:goto _fbfc ;case 57:goto _bdcg ;case 27:goto _fbca ;case 28:goto _adca ;case 29:goto _cbb ;case 30:goto _ddcbg ;case 31:goto _gad ;case 58:goto _afb ;
case 32:goto _gccc ;case 59:goto _fbeb ;case 33:goto _gebe ;case 60:goto _cacb ;case 61:goto _dege ;case 62:goto _daed ;};goto _dfgb ;_cba :switch _eea {case 2:{_aeb =(_gcdd )-1;_fcef ._dbd .AddToken (FmtTypeDigit ,nil );};case 3:{_aeb =(_gcdd )-1;_fcef ._dbd .AddToken (FmtTypeDigitOpt ,nil );
};case 5:{_aeb =(_gcdd )-1;};case 8:{_aeb =(_gcdd )-1;_fcef ._dbd .AddToken (FmtTypePercent ,nil );};case 13:{_aeb =(_gcdd )-1;_fcef ._dbd .AddToken (FmtTypeFraction ,_bga [_cea :_gcdd ]);};case 14:{_aeb =(_gcdd )-1;_fcef ._dbd .AddToken (FmtTypeDate ,_bga [_cea :_gcdd ]);
};case 15:{_aeb =(_gcdd )-1;_fcef ._dbd .AddToken (FmtTypeTime ,_bga [_cea :_gcdd ]);};case 16:{_aeb =(_gcdd )-1;_fcef ._dbd .AddToken (FmtTypeTime ,_bga [_cea :_gcdd ]);};case 18:{_aeb =(_gcdd )-1;};case 20:{_aeb =(_gcdd )-1;_fcef ._dbd .AddToken (FmtTypeLiteral ,_bga [_cea :_gcdd ]);
};case 21:{_aeb =(_gcdd )-1;_fcef ._dbd .AddToken (FmtTypeLiteral ,_bga [_cea +1:_gcdd -1]);};};goto _bfg ;_cda :_aeb =(_gcdd )-1;{_fcef ._dbd .AddToken (FmtTypeFraction ,_bga [_cea :_gcdd ]);};goto _bfg ;_ffc :_aeb =(_gcdd )-1;{_fcef ._dbd .AddToken (FmtTypeDigitOpt ,nil );
};goto _bfg ;_bgf :_gcdd =_aeb +1;{_fcef ._dbd .AddToken (FmtTypeDigitOptThousands ,nil );};goto _bfg ;_fgcf :_aeb =(_gcdd )-1;{_fcef ._dbd .AddToken (FmtTypePercent ,nil );};goto _bfg ;_aga :_aeb =(_gcdd )-1;{_fcef ._dbd .AddToken (FmtTypeDate ,_bga [_cea :_gcdd ]);
};goto _bfg ;_gce :_aeb =(_gcdd )-1;{_fcef ._dbd .AddToken (FmtTypeDigit ,nil );};goto _bfg ;_cbg :_aeb =(_gcdd )-1;{_fcef ._dbd .AddToken (FmtTypeTime ,_bga [_cea :_gcdd ]);};goto _bfg ;_cdgf :_aeb =(_gcdd )-1;{_fcef ._dbd .AddToken (FmtTypeLiteral ,_bga [_cea :_gcdd ]);
};goto _bfg ;_gfff :_gcdd =_aeb +1;{_fcef ._dbd ._fc =true ;};goto _bfg ;_dcdb :_gcdd =_aeb +1;{_fcef ._dbd .AddToken (FmtTypeLiteral ,_bga [_cea :_gcdd ]);};goto _bfg ;_ccb :_gcdd =_aeb +1;{_fcef ._dbd .AddToken (FmtTypeDollar ,nil );};goto _bfg ;_cace :_gcdd =_aeb +1;
{_fcef ._dbd .AddToken (FmtTypeComma ,nil );};goto _bfg ;_bbc :_gcdd =_aeb +1;{_fcef ._dbd .AddToken (FmtTypeDecimal ,nil );};goto _bfg ;_dec :_gcdd =_aeb +1;{_fcef .nextFmt ();};goto _bfg ;_ged :_gcdd =_aeb +1;{_fcef ._dbd .AddToken (FmtTypeText ,nil );
};goto _bfg ;_bccd :_gcdd =_aeb +1;{_fcef ._dbd .AddToken (FmtTypeUnderscore ,nil );};goto _bfg ;_dgca :_gcdd =_aeb ;_aeb --;{_fcef ._dbd .AddToken (FmtTypeLiteral ,_bga [_cea :_gcdd ]);};goto _bfg ;_aecg :_gcdd =_aeb ;_aeb --;{_fcef ._dbd .AddToken (FmtTypeLiteral ,_bga [_cea +1:_gcdd -1]);
};goto _bfg ;_bfbb :_gcdd =_aeb ;_aeb --;{_fcef ._dbd .AddToken (FmtTypeDigitOpt ,nil );};goto _bfg ;_cfg :_gcdd =_aeb ;_aeb --;{_fcef ._dbd .AddToken (FmtTypeFraction ,_bga [_cea :_gcdd ]);};goto _bfg ;_aged :_gcdd =_aeb ;_aeb --;{_fcef ._dbd .AddToken (FmtTypePercent ,nil );
};goto _bfg ;_gcec :_gcdd =_aeb ;_aeb --;{_fcef ._dbd .AddToken (FmtTypeDate ,_bga [_cea :_gcdd ]);};goto _bfg ;_ebf :_gcdd =_aeb ;_aeb --;{_fcef ._dbd .AddToken (FmtTypeDigit ,nil );};goto _bfg ;_deg :_gcdd =_aeb ;_aeb --;{_fcef ._dbd .AddToken (FmtTypeTime ,_bga [_cea :_gcdd ]);
};goto _bfg ;_dbc :_gcdd =_aeb ;_aeb --;{};goto _bfg ;_bbb :_gcdd =_aeb +1;{_fcef ._dbd .IsExponential =true ;};goto _bfg ;_gfe :_gcdd =_aeb +1;{_fcef ._dbd .AddToken (FmtTypeLiteral ,_bga [_cea +1:_gcdd ]);};goto _bfg ;_bfg :_cea =0;if _aeb ++;_aeb ==_cegg {goto _bfgg ;
};_daef :_cea =_aeb ;switch _bga [_aeb ]{case 34:goto _ddcc ;case 35:goto _eag ;case 36:goto _ccb ;case 37:goto _gbc ;case 44:goto _cace ;case 46:goto _bbc ;case 47:goto _ffd ;case 48:goto _fage ;case 58:goto _acec ;case 59:goto _dec ;case 63:goto _fee ;
case 64:goto _ged ;case 65:goto _fffd ;case 69:goto _ccfg ;case 71:goto _effc ;case 91:goto _cdbe ;case 92:goto _gaf ;case 95:goto _bccd ;case 100:goto _ffd ;case 104:goto _acec ;case 109:goto _bbgd ;case 115:goto _ebec ;case 121:goto _befc ;};if 49<=_bga [_aeb ]&&_bga [_aeb ]<=57{goto _dcfd ;
};goto _dcdb ;_ddcc :_gcdd =_aeb +1;_eea =20;goto _bcf ;_bcf :if _aeb ++;_aeb ==_cegg {goto _baad ;};_eeae :if _bga [_aeb ]==34{goto _fffe ;};goto _efe ;_efe :if _aeb ++;_aeb ==_cegg {goto _fdd ;};_ebe :if _bga [_aeb ]==34{goto _fffe ;};goto _efe ;_fffe :_gcdd =_aeb +1;
_eea =21;goto _gag ;_gag :if _aeb ++;_aeb ==_cegg {goto _bgc ;};_fab :if _bga [_aeb ]==34{goto _efe ;};goto _aecg ;_eag :_gcdd =_aeb +1;_eea =3;goto _fccb ;_fccb :if _aeb ++;_aeb ==_cegg {goto _ega ;};_gfb :switch _bga [_aeb ]{case 35:goto _eg ;case 37:goto _eg ;
case 44:goto _cgc ;case 47:goto _eagc ;case 48:goto _eg ;case 63:goto _eg ;};goto _bfbb ;_eg :if _aeb ++;_aeb ==_cegg {goto _gfdf ;};_agg :switch _bga [_aeb ]{case 35:goto _eg ;case 37:goto _eg ;case 47:goto _eagc ;case 48:goto _eg ;case 63:goto _eg ;};
goto _cba ;_eagc :if _aeb ++;_aeb ==_cegg {goto _cbdf ;};_aebc :switch _bga [_aeb ]{case 35:goto _fbcb ;case 37:goto _daec ;case 48:goto _efc ;case 63:goto _fbcb ;};if 49<=_bga [_aeb ]&&_bga [_aeb ]<=57{goto _bcbc ;};goto _cba ;_fbcb :_gcdd =_aeb +1;goto _eaea ;
_eaea :if _aeb ++;_aeb ==_cegg {goto _cce ;};_cgb :switch _bga [_aeb ]{case 35:goto _fbcb ;case 37:goto _fbcb ;case 44:goto _fbcb ;case 46:goto _fbcb ;case 48:goto _fbcb ;case 63:goto _fbcb ;case 65:goto _eda ;};goto _cfg ;_eda :if _aeb ++;_aeb ==_cegg {goto _aca ;
};_eeda :switch _bga [_aeb ]{case 47:goto _ddg ;case 77:goto _ebff ;};goto _cda ;_ddg :if _aeb ++;_aeb ==_cegg {goto _acba ;};_bcb :if _bga [_aeb ]==80{goto _ebed ;};goto _cda ;_ebed :_gcdd =_aeb +1;goto _ead ;_ead :if _aeb ++;_aeb ==_cegg {goto _bcba ;
};_ggd :if _bga [_aeb ]==65{goto _eda ;};goto _cfg ;_ebff :if _aeb ++;_aeb ==_cegg {goto _ffeg ;};_daf :if _bga [_aeb ]==47{goto _fbe ;};goto _cda ;_fbe :if _aeb ++;_aeb ==_cegg {goto _dbecb ;};_fcg :if _bga [_aeb ]==80{goto _efg ;};goto _cda ;_efg :if _aeb ++;
_aeb ==_cegg {goto _fceeg ;};_dbec :if _bga [_aeb ]==77{goto _ebed ;};goto _cda ;_daec :if _aeb ++;_aeb ==_cegg {goto _faa ;};_cfac :switch _bga [_aeb ]{case 35:goto _cfae ;case 37:goto _gfaaa ;case 63:goto _cfae ;};if 48<=_bga [_aeb ]&&_bga [_aeb ]<=57{goto _cdbb ;
};goto _cba ;_cfae :_gcdd =_aeb +1;goto _ddcg ;_ddcg :if _aeb ++;_aeb ==_cegg {goto _agf ;};_edf :switch _bga [_aeb ]{case 35:goto _fbcb ;case 37:goto _aba ;case 44:goto _fbcb ;case 46:goto _fbcb ;case 48:goto _fbcb ;case 63:goto _fbcb ;case 65:goto _eda ;
};goto _cfg ;_aba :if _aeb ++;_aeb ==_cegg {goto _beaf ;};_fca :switch _bga [_aeb ]{case 35:goto _ece ;case 44:goto _ece ;case 46:goto _ece ;case 48:goto _ece ;case 63:goto _ece ;};goto _cda ;_ece :_gcdd =_aeb +1;goto _aeg ;_aeg :if _aeb ++;_aeb ==_cegg {goto _gcg ;
};_babf :switch _bga [_aeb ]{case 35:goto _ece ;case 44:goto _ece ;case 46:goto _ece ;case 48:goto _ece ;case 63:goto _ece ;case 65:goto _eda ;};goto _cfg ;_gfaaa :if _aeb ++;_aeb ==_cegg {goto _dcg ;};_bdc :if _bga [_aeb ]==37{goto _gfaaa ;};if 48<=_bga [_aeb ]&&_bga [_aeb ]<=57{goto _cdbb ;
};goto _cba ;_cdbb :_gcdd =_aeb +1;_eea =13;goto _bcg ;_bcg :if _aeb ++;_aeb ==_cegg {goto _efbb ;};_dfed :switch _bga [_aeb ]{case 35:goto _fbcb ;case 37:goto _gab ;case 44:goto _fbcb ;case 46:goto _fbcb ;case 48:goto _fgb ;case 63:goto _fbcb ;case 65:goto _eda ;
};if 49<=_bga [_aeb ]&&_bga [_aeb ]<=57{goto _cdbb ;};goto _cfg ;_gab :if _aeb ++;_aeb ==_cegg {goto _egb ;};_acf :switch _bga [_aeb ]{case 35:goto _ece ;case 37:goto _gfaaa ;case 44:goto _ece ;case 46:goto _ece ;case 63:goto _ece ;};if 48<=_bga [_aeb ]&&_bga [_aeb ]<=57{goto _cdbb ;
};goto _cda ;_fgb :_gcdd =_aeb +1;goto _faf ;_faf :if _aeb ++;_aeb ==_cegg {goto _afdf ;};_cfgc :switch _bga [_aeb ]{case 35:goto _fbcb ;case 37:goto _fgb ;case 44:goto _fbcb ;case 46:goto _fbcb ;case 48:goto _fgb ;case 63:goto _fbcb ;case 65:goto _eda ;
};if 49<=_bga [_aeb ]&&_bga [_aeb ]<=57{goto _cdbb ;};goto _cfg ;_efc :_gcdd =_aeb +1;goto _cdbd ;_cdbd :if _aeb ++;_aeb ==_cegg {goto _fgd ;};_dag :switch _bga [_aeb ]{case 35:goto _fbcb ;case 37:goto _fgb ;case 44:goto _fbcb ;case 46:goto _fbcb ;case 48:goto _efc ;
case 63:goto _fbcb ;case 65:goto _eda ;};if 49<=_bga [_aeb ]&&_bga [_aeb ]<=57{goto _bcbc ;};goto _cfg ;_bcbc :_gcdd =_aeb +1;goto _ddcbf ;_ddcbf :if _aeb ++;_aeb ==_cegg {goto _cbda ;};_eba :switch _bga [_aeb ]{case 35:goto _fbcb ;case 37:goto _cdbb ;
case 44:goto _fbcb ;case 46:goto _fbcb ;case 48:goto _efc ;case 63:goto _fbcb ;case 65:goto _eda ;};if 49<=_bga [_aeb ]&&_bga [_aeb ]<=57{goto _bcbc ;};goto _cfg ;_cgc :if _aeb ++;_aeb ==_cegg {goto _acag ;};_ege :if _bga [_aeb ]==35{goto _bgf ;};goto _ffc ;
_gbc :_gcdd =_aeb +1;_eea =8;goto _ccfc ;_ccfc :if _aeb ++;_aeb ==_cegg {goto _aed ;};_cbd :switch _bga [_aeb ]{case 35:goto _efgd ;case 37:goto _bcgg ;case 48:goto _gbf ;case 63:goto _efgd ;};if 49<=_bga [_aeb ]&&_bga [_aeb ]<=57{goto _afd ;};goto _aged ;
_efgd :if _aeb ++;_aeb ==_cegg {goto _bbfb ;};_fdff :switch _bga [_aeb ]{case 35:goto _efgd ;case 47:goto _eagc ;case 48:goto _efgd ;case 63:goto _efgd ;};goto _fgcf ;_bcgg :if _aeb ++;_aeb ==_cegg {goto _acaf ;};_dfef :if _bga [_aeb ]==37{goto _bcgg ;
};if 48<=_bga [_aeb ]&&_bga [_aeb ]<=57{goto _afd ;};goto _cba ;_afd :if _aeb ++;_aeb ==_cegg {goto _egbd ;};_bdae :switch _bga [_aeb ]{case 37:goto _bcgg ;case 47:goto _eagc ;};if 48<=_bga [_aeb ]&&_bga [_aeb ]<=57{goto _afd ;};goto _cba ;_gbf :if _aeb ++;
_aeb ==_cegg {goto _gagg ;};_dbbg :switch _bga [_aeb ]{case 35:goto _efgd ;case 37:goto _bcgg ;case 47:goto _eagc ;case 48:goto _gbf ;case 63:goto _efgd ;};if 49<=_bga [_aeb ]&&_bga [_aeb ]<=57{goto _afd ;};goto _fgcf ;_ffd :_gcdd =_aeb +1;goto _bef ;_bef :if _aeb ++;
_aeb ==_cegg {goto _fac ;};_cgcd :switch _bga [_aeb ]{case 47:goto _ffd ;case 100:goto _ffd ;case 109:goto _ffd ;case 121:goto _bbfc ;};goto _gcec ;_bbfc :if _aeb ++;_aeb ==_cegg {goto _bbge ;};_bbcd :if _bga [_aeb ]==121{goto _ffd ;};goto _aga ;_fage :_gcdd =_aeb +1;
_eea =2;goto _ecd ;_ecd :if _aeb ++;_aeb ==_cegg {goto _dcde ;};_fbf :switch _bga [_aeb ]{case 35:goto _eg ;case 37:goto _dega ;case 47:goto _eagc ;case 48:goto _ecg ;case 63:goto _eg ;};if 49<=_bga [_aeb ]&&_bga [_aeb ]<=57{goto _cde ;};goto _ebf ;_dega :if _aeb ++;
_aeb ==_cegg {goto _cdcf ;};_egg :switch _bga [_aeb ]{case 35:goto _eg ;case 37:goto _dega ;case 47:goto _eagc ;case 48:goto _dega ;case 63:goto _eg ;};if 49<=_bga [_aeb ]&&_bga [_aeb ]<=57{goto _afd ;};goto _gce ;_ecg :if _aeb ++;_aeb ==_cegg {goto _bfed ;
};_bce :switch _bga [_aeb ]{case 35:goto _eg ;case 37:goto _dega ;case 47:goto _eagc ;case 48:goto _ecg ;case 63:goto _eg ;};if 49<=_bga [_aeb ]&&_bga [_aeb ]<=57{goto _cde ;};goto _gce ;_cde :if _aeb ++;_aeb ==_cegg {goto _bbfbf ;};_dbdb :switch _bga [_aeb ]{case 37:goto _afd ;
case 47:goto _eagc ;};if 48<=_bga [_aeb ]&&_bga [_aeb ]<=57{goto _cde ;};goto _cba ;_dcfd :_gcdd =_aeb +1;_eea =20;goto _abaa ;_abaa :if _aeb ++;_aeb ==_cegg {goto _gca ;};_cab :switch _bga [_aeb ]{case 37:goto _afd ;case 47:goto _eagc ;};if 48<=_bga [_aeb ]&&_bga [_aeb ]<=57{goto _cde ;
};goto _dgca ;_acec :_gcdd =_aeb +1;_eea =15;goto _cdba ;_cdba :if _aeb ++;_aeb ==_cegg {goto _gggc ;};_ccagf :switch _bga [_aeb ]{case 58:goto _acec ;case 65:goto _egd ;case 104:goto _acec ;case 109:goto _acec ;case 115:goto _ebec ;};goto _deg ;_egd :if _aeb ++;
_aeb ==_cegg {goto _gd ;};_cbdg :switch _bga [_aeb ]{case 47:goto _efbc ;case 77:goto _bcdb ;};goto _cba ;_efbc :if _aeb ++;_aeb ==_cegg {goto _cgac ;};_baa :if _bga [_aeb ]==80{goto _acec ;};goto _cba ;_bcdb :if _aeb ++;_aeb ==_cegg {goto _dee ;};_eaa :if _bga [_aeb ]==47{goto _fdee ;
};goto _cba ;_fdee :if _aeb ++;_aeb ==_cegg {goto _cbcb ;};_adc :if _bga [_aeb ]==80{goto _bceb ;};goto _cba ;_bceb :if _aeb ++;_aeb ==_cegg {goto _gbg ;};_fcd :if _bga [_aeb ]==77{goto _acec ;};goto _cba ;_ebec :_gcdd =_aeb +1;_eea =15;goto _ffac ;_ffac :if _aeb ++;
_aeb ==_cegg {goto _gada ;};_cbgf :switch _bga [_aeb ]{case 46:goto _abd ;case 58:goto _acec ;case 65:goto _egd ;case 104:goto _acec ;case 109:goto _acec ;case 115:goto _ebec ;};goto _deg ;_abd :if _aeb ++;_aeb ==_cegg {goto _fcca ;};_cgab :if _bga [_aeb ]==48{goto _cgfd ;
};goto _cbg ;_cgfd :_gcdd =_aeb +1;_eea =15;goto _cdbdb ;_cdbdb :if _aeb ++;_aeb ==_cegg {goto _bag ;};_fgf :switch _bga [_aeb ]{case 48:goto _bgae ;case 58:goto _acec ;case 65:goto _egd ;case 104:goto _acec ;case 109:goto _acec ;case 115:goto _ebec ;};
goto _deg ;_bgae :_gcdd =_aeb +1;_eea =15;goto _fec ;_fec :if _aeb ++;_aeb ==_cegg {goto _bbgab ;};_dcb :switch _bga [_aeb ]{case 48:goto _acec ;case 58:goto _acec ;case 65:goto _egd ;case 104:goto _acec ;case 109:goto _acec ;case 115:goto _ebec ;};goto _deg ;
_fee :_gcdd =_aeb +1;_eea =5;goto _cebc ;_cebc :if _aeb ++;_aeb ==_cegg {goto _bfde ;};_bedf :switch _bga [_aeb ]{case 35:goto _eg ;case 37:goto _eg ;case 47:goto _eagc ;case 48:goto _eg ;case 63:goto _eg ;};goto _dbc ;_fffd :_gcdd =_aeb +1;_eea =20;goto _gfg ;
_gfg :if _aeb ++;_aeb ==_cegg {goto _eceb ;};_efbg :switch _bga [_aeb ]{case 47:goto _efbc ;case 77:goto _bcdb ;};goto _dgca ;_ccfg :if _aeb ++;_aeb ==_cegg {goto _gbd ;};_fbfc :switch _bga [_aeb ]{case 43:goto _bbb ;case 45:goto _bbb ;};goto _dgca ;_effc :_gcdd =_aeb +1;
goto _cagf ;_cagf :if _aeb ++;_aeb ==_cegg {goto _dafc ;};_bdcg :if _bga [_aeb ]==101{goto _ebfa ;};goto _dgca ;_ebfa :if _aeb ++;_aeb ==_cegg {goto _cbf ;};_fbca :if _bga [_aeb ]==110{goto _gae ;};goto _cdgf ;_gae :if _aeb ++;_aeb ==_cegg {goto _egc ;
};_adca :if _bga [_aeb ]==101{goto _bcca ;};goto _cdgf ;_bcca :if _aeb ++;_aeb ==_cegg {goto _gda ;};_cbb :if _bga [_aeb ]==114{goto _afdd ;};goto _cdgf ;_afdd :if _aeb ++;_aeb ==_cegg {goto _cae ;};_ddcbg :if _bga [_aeb ]==97{goto _fffg ;};goto _cdgf ;
_fffg :if _aeb ++;_aeb ==_cegg {goto _edc ;};_gad :if _bga [_aeb ]==108{goto _gfff ;};goto _cdgf ;_cdbe :_gcdd =_aeb +1;_eea =20;goto _efa ;_efa :if _aeb ++;_aeb ==_cegg {goto _ffb ;};_afb :switch _bga [_aeb ]{case 104:goto _cdbg ;case 109:goto _cdbg ;
case 115:goto _cdbg ;};goto _feec ;_feec :if _aeb ++;_aeb ==_cegg {goto _bdb ;};_gccc :if _bga [_aeb ]==93{goto _dfd ;};goto _feec ;_dfd :_gcdd =_aeb +1;_eea =18;goto _dab ;_fcee :_gcdd =_aeb +1;_eea =16;goto _dab ;_dab :if _aeb ++;_aeb ==_cegg {goto _ffcg ;
};_fbeb :if _bga [_aeb ]==93{goto _dfd ;};goto _feec ;_cdbg :if _aeb ++;_aeb ==_cegg {goto _egdg ;};_gebe :if _bga [_aeb ]==93{goto _fcee ;};goto _feec ;_gaf :if _aeb ++;_aeb ==_cegg {goto _eeag ;};_cacb :goto _gfe ;_bbgd :_gcdd =_aeb +1;_eea =14;goto _afaa ;
_afaa :if _aeb ++;_aeb ==_cegg {goto _bfaa ;};_dege :switch _bga [_aeb ]{case 47:goto _ffd ;case 58:goto _acec ;case 65:goto _egd ;case 100:goto _ffd ;case 104:goto _acec ;case 109:goto _bbgd ;case 115:goto _ebec ;case 121:goto _bbfc ;};goto _gcec ;_befc :if _aeb ++;
_aeb ==_cegg {goto _ddca ;};_daed :if _bga [_aeb ]==121{goto _ffd ;};goto _dgca ;_dfgb :_bfgg :_bfd =34;goto _fef ;_baad :_bfd =35;goto _fef ;_fdd :_bfd =0;goto _fef ;_bgc :_bfd =36;goto _fef ;_ega :_bfd =37;goto _fef ;_gfdf :_bfd =1;goto _fef ;_cbdf :_bfd =2;
goto _fef ;_cce :_bfd =38;goto _fef ;_aca :_bfd =3;goto _fef ;_acba :_bfd =4;goto _fef ;_bcba :_bfd =39;goto _fef ;_ffeg :_bfd =5;goto _fef ;_dbecb :_bfd =6;goto _fef ;_fceeg :_bfd =7;goto _fef ;_faa :_bfd =8;goto _fef ;_agf :_bfd =40;goto _fef ;_beaf :_bfd =9;
goto _fef ;_gcg :_bfd =41;goto _fef ;_dcg :_bfd =10;goto _fef ;_efbb :_bfd =42;goto _fef ;_egb :_bfd =11;goto _fef ;_afdf :_bfd =43;goto _fef ;_fgd :_bfd =44;goto _fef ;_cbda :_bfd =45;goto _fef ;_acag :_bfd =12;goto _fef ;_aed :_bfd =46;goto _fef ;_bbfb :_bfd =13;
goto _fef ;_acaf :_bfd =14;goto _fef ;_egbd :_bfd =15;goto _fef ;_gagg :_bfd =16;goto _fef ;_fac :_bfd =47;goto _fef ;_bbge :_bfd =17;goto _fef ;_dcde :_bfd =48;goto _fef ;_cdcf :_bfd =18;goto _fef ;_bfed :_bfd =19;goto _fef ;_bbfbf :_bfd =20;goto _fef ;
_gca :_bfd =49;goto _fef ;_gggc :_bfd =50;goto _fef ;_gd :_bfd =21;goto _fef ;_cgac :_bfd =22;goto _fef ;_dee :_bfd =23;goto _fef ;_cbcb :_bfd =24;goto _fef ;_gbg :_bfd =25;goto _fef ;_gada :_bfd =51;goto _fef ;_fcca :_bfd =26;goto _fef ;_bag :_bfd =52;
goto _fef ;_bbgab :_bfd =53;goto _fef ;_bfde :_bfd =54;goto _fef ;_eceb :_bfd =55;goto _fef ;_gbd :_bfd =56;goto _fef ;_dafc :_bfd =57;goto _fef ;_cbf :_bfd =27;goto _fef ;_egc :_bfd =28;goto _fef ;_gda :_bfd =29;goto _fef ;_cae :_bfd =30;goto _fef ;_edc :_bfd =31;
goto _fef ;_ffb :_bfd =58;goto _fef ;_bdb :_bfd =32;goto _fef ;_ffcg :_bfd =59;goto _fef ;_egdg :_bfd =33;goto _fef ;_eeag :_bfd =60;goto _fef ;_bfaa :_bfd =61;goto _fef ;_ddca :_bfd =62;goto _fef ;_fef :{};if _aeb ==_efd {switch _bfd {case 35:goto _dgca ;
case 0:goto _cba ;case 36:goto _aecg ;case 37:goto _bfbb ;case 1:goto _cba ;case 2:goto _cba ;case 38:goto _cfg ;case 3:goto _cda ;case 4:goto _cda ;case 39:goto _cfg ;case 5:goto _cda ;case 6:goto _cda ;case 7:goto _cda ;case 8:goto _cba ;case 40:goto _cfg ;
case 9:goto _cda ;case 41:goto _cfg ;case 10:goto _cba ;case 42:goto _cfg ;case 11:goto _cda ;case 43:goto _cfg ;case 44:goto _cfg ;case 45:goto _cfg ;case 12:goto _ffc ;case 46:goto _aged ;case 13:goto _fgcf ;case 14:goto _cba ;case 15:goto _cba ;case 16:goto _fgcf ;
case 47:goto _gcec ;case 17:goto _aga ;case 48:goto _ebf ;case 18:goto _gce ;case 19:goto _gce ;case 20:goto _cba ;case 49:goto _dgca ;case 50:goto _deg ;case 21:goto _cba ;case 22:goto _cba ;case 23:goto _cba ;case 24:goto _cba ;case 25:goto _cba ;case 51:goto _deg ;
case 26:goto _cbg ;case 52:goto _deg ;case 53:goto _deg ;case 54:goto _dbc ;case 55:goto _dgca ;case 56:goto _dgca ;case 57:goto _dgca ;case 27:goto _cdgf ;case 28:goto _cdgf ;case 29:goto _cdgf ;case 30:goto _cdgf ;case 31:goto _cdgf ;case 58:goto _dgca ;
case 32:goto _cba ;case 59:goto _cba ;case 33:goto _cdgf ;case 60:goto _dgca ;case 61:goto _gcec ;case 62:goto _dgca ;};};};if _cea > 0{copy (_bga [0:],_bga [_cea :]);};};_ =_efd ;if _bfd ==_ggfa {_f .Log .Debug ("\u0066o\u0072m\u0061\u0074\u0020\u0070\u0061r\u0073\u0065 \u0065\u0072\u0072\u006f\u0072");
};};func Parse (s string )[]Format {_aacf :=Lexer {};_aacf .Lex (_d .NewReader (s ));_aacf ._bbf =append (_aacf ._bbf ,_aacf ._dbd );return _aacf ._bbf ;};var _dg =[...]uint8 {0,14,26,41,53,67,81,94,118,135,146,157,172,183};func _cegcd (_abe []byte )[]byte {for _cec :=len (_abe )-1;
_cec > 0;_cec --{if _abe [_cec ]=='9'+1{_abe [_cec ]='0';if _abe [_cec -1]=='.'{_cec --;};_abe [_cec -1]++;};};if _abe [0]=='9'+1{_abe [0]='0';copy (_abe [1:],_abe [0:]);_abe [0]='1';};return _abe ;};func _ada (_deb int64 ,_dae Format )[]byte {if !_dae .IsExponential ||len (_dae .Exponent )==0{return nil ;
};_cacd :=_bb .AppendInt (nil ,_dgb (_deb ),10);_fff :=make ([]byte ,0,len (_cacd )+2);_fff =append (_fff ,'E');if _deb >=0{_fff =append (_fff ,'+');}else {_fff =append (_fff ,'-');_deb *=-1;};_gef :=0;_cbc :for _ac :=len (_dae .Exponent )-1;_ac >=0;_ac --{_agd :=len (_cacd )-1-_gef ;
_fcc :=_dae .Exponent [_ac ];switch _fcc .Type {case FmtTypeDigit :if _agd >=0{_fff =append (_fff ,_cacd [_agd ]);_gef ++;}else {_fff =append (_fff ,'0');};case FmtTypeDigitOpt :if _agd >=0{_fff =append (_fff ,_cacd [_agd ]);_gef ++;}else {for _aec :=_ac ;
_aec >=0;_aec --{_bdgg :=_dae .Exponent [_aec ];if _bdgg .Type ==FmtTypeLiteral {_fff =append (_fff ,_bdgg .Literal );};};break _cbc ;};case FmtTypeLiteral :_fff =append (_fff ,_fcc .Literal );default:_f .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0065\u0078p\u0020\u0025\u0076",_fcc );
};};if _gef < len (_cacd ){_fff =append (_fff ,_cacd [len (_cacd )-_gef -1:_gef -1]...);};_aa (_fff [2:]);return _fff ;};const (FmtTypeLiteral FmtType =iota ;FmtTypeDigit ;FmtTypeDigitOpt ;FmtTypeComma ;FmtTypeDecimal ;FmtTypePercent ;FmtTypeDollar ;FmtTypeDigitOptThousands ;
FmtTypeUnderscore ;FmtTypeDate ;FmtTypeTime ;FmtTypeFraction ;FmtTypeText ;);

// Value formats a value as a number or string depending on  if it appears to be
// a number or string.
func Value (v string ,f string )string {if IsNumber (v ){_cdg ,_ :=_bb .ParseFloat (v ,64);return Number (_cdg ,f );};return String (v ,f );};func (_cef *Lexer )nextFmt (){_cef ._bbf =append (_cef ._bbf ,_cef ._dbd );_cef ._dbd =Format {}};

// FmtType is the type of a format token.
//
//go:generate stringer -type=FmtType
type FmtType byte ;func IsNumber (data string )(_ebg bool ){_agb ,_dfe ,_gga :=0,0,len (data );_ddcb :=len (data );_gfa ,_ffa ,_add :=0,0,0;_ =_ffa ;_ =_add ;_ =_gfa ;{_agb =_cdb ;_gfa =0;_ffa =0;_add =0;};{if _dfe ==_gga {goto _bda ;};switch _agb {case 0:goto _dfac ;
case 1:goto _fdc ;case 2:goto _daeb ;case 3:goto _bfe ;case 4:goto _bae ;case 5:goto _gb ;case 6:goto _baf ;case 7:goto _bgef ;};goto _acb ;_cbe :_ffa =_dfe ;_dfe --;{_ebg =false ;};goto _bfbe ;_dcc :_ffa =_dfe ;_dfe --;{_ebg =_ffa ==len (data );};goto _bfbe ;
_bbe :_ffa =_dfe ;_dfe --;{_ebg =_ffa ==len (data );};goto _bfbe ;_bed :switch _add {case 2:{_dfe =(_ffa )-1;_ebg =_ffa ==len (data );};case 3:{_dfe =(_ffa )-1;_ebg =false ;};};goto _bfbe ;_bfbe :_gfa =0;if _dfe ++;_dfe ==_gga {goto _fea ;};_dfac :_gfa =_dfe ;
switch data [_dfe ]{case 43:goto _aff ;case 45:goto _aff ;};if 48<=data [_dfe ]&&data [_dfe ]<=57{goto _edb ;};goto _efb ;_efb :if _dfe ++;_dfe ==_gga {goto _fcb ;};_fdc :goto _efb ;_aff :if _dfe ++;_dfe ==_gga {goto _fgc ;};_daeb :if 48<=data [_dfe ]&&data [_dfe ]<=57{goto _edb ;
};goto _efb ;_edb :if _dfe ++;_dfe ==_gga {goto _eaf ;};_bfe :if data [_dfe ]==46{goto _abbd ;};if 48<=data [_dfe ]&&data [_dfe ]<=57{goto _edb ;};goto _efb ;_abbd :if _dfe ++;_dfe ==_gga {goto _gfaa ;};_bae :if 48<=data [_dfe ]&&data [_dfe ]<=57{goto _fde ;
};goto _efb ;_fde :if _dfe ++;_dfe ==_gga {goto _feg ;};_gb :if data [_dfe ]==69{goto _aac ;};if 48<=data [_dfe ]&&data [_dfe ]<=57{goto _fde ;};goto _efb ;_aac :if _dfe ++;_dfe ==_gga {goto _def ;};_baf :switch data [_dfe ]{case 43:goto _bea ;case 45:goto _bea ;
};goto _efb ;_bea :_ffa =_dfe +1;_add =3;goto _ddf ;_cad :_ffa =_dfe +1;_add =2;goto _ddf ;_ddf :if _dfe ++;_dfe ==_gga {goto _afa ;};_bgef :if 48<=data [_dfe ]&&data [_dfe ]<=57{goto _cad ;};goto _efb ;_acb :_fea :_agb =0;goto _bda ;_fcb :_agb =1;goto _bda ;
_fgc :_agb =2;goto _bda ;_eaf :_agb =3;goto _bda ;_gfaa :_agb =4;goto _bda ;_feg :_agb =5;goto _bda ;_def :_agb =6;goto _bda ;_afa :_agb =7;goto _bda ;_bda :{};if _dfe ==_ddcb {switch _agb {case 1:goto _cbe ;case 2:goto _cbe ;case 3:goto _dcc ;case 4:goto _cbe ;
case 5:goto _bbe ;case 6:goto _cbe ;case 7:goto _bed ;};};};if _agb ==_ggfa {return false ;};return ;};const _caf int =34;