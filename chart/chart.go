//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package chart ;import (_cf "fmt";_f "github.com/unidoc/unioffice";_cd "github.com/unidoc/unioffice/color";_fd "github.com/unidoc/unioffice/drawing";_gf "github.com/unidoc/unioffice/measurement";_d "github.com/unidoc/unioffice/schema/soo/dml";_c "github.com/unidoc/unioffice/schema/soo/dml/chart";
_fc "math/rand";);func MakeTitle (x *_c .CT_Title )Title {return Title {x }};func MakeSeriesAxis (x *_c .CT_SerAx )SeriesAxis {return SeriesAxis {x }};

// SetHoleSize controls the hole size in the pie chart and is measured in percent.
func (_fcc DoughnutChart )SetHoleSize (pct uint8 ){if _fcc ._fee .HoleSize ==nil {_fcc ._fee .HoleSize =_c .NewCT_HoleSize ();};if _fcc ._fee .HoleSize .ValAttr ==nil {_fcc ._fee .HoleSize .ValAttr =&_c .ST_HoleSize {};};_fcc ._fee .HoleSize .ValAttr .ST_HoleSizeUByte =&pct ;
};

// SetText sets the series text.
func (_bebg PieChartSeries )SetText (s string ){_bebg ._adg .Tx =_c .NewCT_SerTx ();_bebg ._adg .Tx .Choice .V =&s ;};

// Values returns the bubble size data source.
func (_efg BubbleChartSeries )BubbleSizes ()NumberDataSource {if _efg ._dcg .BubbleSize ==nil {_efg ._dcg .BubbleSize =_c .NewCT_NumDataSource ();};return MakeNumberDataSource (_efg ._dcg .BubbleSize );};

// SetOrder sets the order of the series
func (_gcg SurfaceChartSeries )SetOrder (idx uint32 ){_gcg ._fcdb .Order .ValAttr =idx };

// InitializeDefaults the bar chart to its defaults
func (_fab DoughnutChart )InitializeDefaults (){_fab ._fee .VaryColors =_c .NewCT_Boolean ();_fab ._fee .VaryColors .ValAttr =_f .Bool (true );_fab ._fee .HoleSize =_c .NewCT_HoleSize ();_fab ._fee .HoleSize .ValAttr =&_c .ST_HoleSize {};_fab ._fee .HoleSize .ValAttr .ST_HoleSizeUByte =_f .Uint8 (50);
};func MakeNumberDataSource (x *_c .CT_NumDataSource )NumberDataSource {return NumberDataSource {x }};

// CategoryAxis returns the category data source.
func (_cee RadarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _cee ._dcc .Cat ==nil {_cee ._dcc .Cat =_c .NewCT_AxDataSource ();};return MakeAxisDataSource (_cee ._dcc .Cat );};

// X returns the inner wrapped XML type.
func (_fac SeriesAxis )X ()*_c .CT_SerAx {return _fac ._ccga };

// X returns the inner wrapped XML type.
func (_edd Chart )X ()*_c .ChartSpace {return _edd ._agg };

// AddAreaChart adds a new area chart to a chart.
func (_adc Chart )AddAreaChart ()AreaChart {_bbf :=_c .NewCT_PlotAreaChoice ();_adc ._agg .Chart .PlotArea .Choice =append (_adc ._agg .Chart .PlotArea .Choice ,_bbf );_bbf .AreaChart =_c .NewCT_AreaChart ();_dcbg :=AreaChart {_de :_bbf .AreaChart };_dcbg .InitializeDefaults ();
return _dcbg ;};

// SetIndex sets the index of the series
func (_ddc LineChartSeries )SetIndex (idx uint32 ){_ddc ._geea .Idx .ValAttr =idx };

// CategoryAxis returns the category data source.
func (_dce AreaChartSeries )CategoryAxis ()CategoryAxisDataSource {if _dce ._fg .Cat ==nil {_dce ._fg .Cat =_c .NewCT_AxDataSource ();};return MakeAxisDataSource (_dce ._fg .Cat );};func MakeChart (x *_c .ChartSpace )Chart {return Chart {x }};func (_eag DateAxis )SetMinorTickMark (m _c .ST_TickMark ){if m ==_c .ST_TickMarkUnset {_eag ._gca .MinorTickMark =nil ;
}else {_eag ._gca .MinorTickMark =_c .NewCT_TickMark ();_eag ._gca .MinorTickMark .ValAttr =m ;};};

// CategoryAxis returns the category data source.
func (_ga BubbleChartSeries )CategoryAxis ()CategoryAxisDataSource {if _ga ._dcg .XVal ==nil {_ga ._dcg .XVal =_c .NewCT_AxDataSource ();};return MakeAxisDataSource (_ga ._dcg .XVal );};

// SetDisplayBlanksAs controls how missing values are displayed.
func (_ced Chart )SetDisplayBlanksAs (v _c .ST_DispBlanksAs ){_ced ._agg .Chart .DispBlanksAs =_c .NewCT_DispBlanksAs ();_ced ._agg .Chart .DispBlanksAs .ValAttr =v ;};func (_cbbd CategoryAxis )SetCrosses (axis Axis ){_cbbd ._dd .Choice =_c .NewEG_AxSharedChoice ();
_cbbd ._dd .Choice .Crosses =_c .NewCT_Crosses ();_cbbd ._dd .Choice .Crosses .ValAttr =_c .ST_CrossesAutoZero ;_cbbd ._dd .CrossAx .ValAttr =axis .AxisID ();};func (_ebd Legend )Properties ()_fd .ShapeProperties {if _ebd ._bde .SpPr ==nil {_ebd ._bde .SpPr =_d .NewCT_ShapeProperties ();
};return _fd .MakeShapeProperties (_ebd ._bde .SpPr );};

// Order returns the order of the series
func (_caf LineChartSeries )Order ()uint32 {return _caf ._geea .Order .ValAttr };func (_dg Bar3DChart )AddAxis (axis Axis ){_faf :=_c .NewCT_UnsignedInt ();_faf .ValAttr =axis .AxisID ();_dg ._ca .AxId =append (_dg ._ca .AxId ,_faf );};

// X returns the inner wrapped XML type.
func (_abfe Marker )X ()*_c .CT_Marker {return _abfe ._dbge };

// Values returns the value data source.
func (_ee AreaChartSeries )Values ()NumberDataSource {if _ee ._fg .Val ==nil {_ee ._fg .Val =_c .NewCT_NumDataSource ();};return MakeNumberDataSource (_ee ._fg .Val );};

// X returns the inner wrapped XML type.
func (_bge Pie3DChart )X ()*_c .CT_Pie3DChart {return _bge ._cgc };

// Labels returns the data label properties.
func (_fae ScatterChartSeries )Labels ()DataLabels {if _fae ._aedc .DLbls ==nil {_fae ._aedc .DLbls =_c .NewCT_DLbls ();};return MakeDataLabels (_fae ._aedc .DLbls );};func (_cbe SurfaceChartSeries )CategoryAxis ()CategoryAxisDataSource {if _cbe ._fcdb .Cat ==nil {_cbe ._fcdb .Cat =_c .NewCT_AxDataSource ();
};return MakeAxisDataSource (_cbe ._fcdb .Cat );};

// X returns the inner wrapped XML type.
func (_dfce DateAxis )X ()*_c .CT_DateAx {return _dfce ._gca };

// InitializeDefaults the bar chart to its defaults
func (_gacd PieOfPieChart )InitializeDefaults (){_gacd ._aef .VaryColors =_c .NewCT_Boolean ();_gacd ._aef .VaryColors .ValAttr =_f .Bool (true );_gacd .SetType (_c .ST_OfPieTypePie );_gacd ._aef .SecondPieSize =_c .NewCT_SecondPieSize ();_gacd ._aef .SecondPieSize .ValAttr =&_c .ST_SecondPieSize {};
_gacd ._aef .SecondPieSize .ValAttr .ST_SecondPieSizeUShort =_f .Uint16 (75);_cgd :=_c .NewCT_ChartLines ();_cgd .SpPr =_d .NewCT_ShapeProperties ();_dced :=_fd .MakeShapeProperties (_cgd .SpPr );_dced .LineProperties ().SetSolidFill (_cd .Auto );_gacd ._aef .SerLines =append (_gacd ._aef .SerLines ,_cgd );
};

// Labels returns the data label properties.
func (_bee LineChartSeries )Labels ()DataLabels {if _bee ._geea .DLbls ==nil {_bee ._geea .DLbls =_c .NewCT_DLbls ();};return MakeDataLabels (_bee ._geea .DLbls );};type CategoryAxis struct{_dd *_c .CT_CatAx };func (_egd DataLabels )SetShowSeriesName (b bool ){_egd .ensureChoice ();
_egd ._caa .Choice .ShowSerName =_c .NewCT_Boolean ();_egd ._caa .Choice .ShowSerName .ValAttr =_f .Bool (b );};

// AddArea3DChart adds a new area chart to a chart.
func (_ce Chart )AddArea3DChart ()Area3DChart {_dgfc (_ce ._agg .Chart );_efe :=_c .NewCT_PlotAreaChoice ();_ce ._agg .Chart .PlotArea .Choice =append (_ce ._agg .Chart .PlotArea .Choice ,_efe );_efe .Area3DChart =_c .NewCT_Area3DChart ();_eec :=Area3DChart {_fcf :_efe .Area3DChart };
_eec .InitializeDefaults ();return _eec ;};func (_aee DateAxis )SetPosition (p _c .ST_AxPos ){_aee ._gca .AxPos =_c .NewCT_AxPos ();_aee ._gca .AxPos .ValAttr =p ;};type Legend struct{_bde *_c .CT_Legend };var NullAxis Axis =nullAxis (0);

// Properties returns the line chart series shape properties.
func (_egc LineChartSeries )Properties ()_fd .ShapeProperties {if _egc ._geea .SpPr ==nil {_egc ._geea .SpPr =_d .NewCT_ShapeProperties ();};return _fd .MakeShapeProperties (_egc ._geea .SpPr );};type SeriesAxis struct{_ccga *_c .CT_SerAx };func (_gc CategoryAxis )Properties ()_fd .ShapeProperties {if _gc ._dd .SpPr ==nil {_gc ._dd .SpPr =_d .NewCT_ShapeProperties ();
};return _fd .MakeShapeProperties (_gc ._dd .SpPr );};

// Properties returns the Bubble chart series shape properties.
func (_faag BubbleChartSeries )Properties ()_fd .ShapeProperties {if _faag ._dcg .SpPr ==nil {_faag ._dcg .SpPr =_d .NewCT_ShapeProperties ();};return _fd .MakeShapeProperties (_faag ._dcg .SpPr );};func (_dge DataLabels )SetShowValue (b bool ){_dge .ensureChoice ();
_dge ._caa .Choice .ShowVal =_c .NewCT_Boolean ();_dge ._caa .Choice .ShowVal .ValAttr =_f .Bool (b );};func (_fdc CategoryAxis )SetMinorTickMark (m _c .ST_TickMark ){if m ==_c .ST_TickMarkUnset {_fdc ._dd .MinorTickMark =nil ;}else {_fdc ._dd .MinorTickMark =_c .NewCT_TickMark ();
_fdc ._dd .MinorTickMark .ValAttr =m ;};};

// Values returns the value data source.
func (_bdg BubbleChartSeries )Values ()NumberDataSource {if _bdg ._dcg .YVal ==nil {_bdg ._dcg .YVal =_c .NewCT_NumDataSource ();};return MakeNumberDataSource (_bdg ._dcg .YVal );};

// PieChartSeries is a series to be used on an Pie chart.
type PieChartSeries struct{_adg *_c .CT_PieSer };func (_age DateAxis )SetTickLabelPosition (p _c .ST_TickLblPos ){if p ==_c .ST_TickLblPosUnset {_age ._gca .TickLblPos =nil ;}else {_age ._gca .TickLblPos =_c .NewCT_TickLblPos ();_age ._gca .TickLblPos .ValAttr =p ;
};};func (_dcgda LineChartSeries )InitializeDefaults (){_dcgda .Properties ().LineProperties ().SetWidth (1*_gf .Point );_dcgda .Properties ().LineProperties ().SetSolidFill (_cd .Black );_dcgda .Properties ().LineProperties ().SetJoin (_fd .LineJoinRound );
_dcgda .Marker ().SetSymbol (_c .ST_MarkerStyleNone );_dcgda .Labels ().SetShowLegendKey (false );_dcgda .Labels ().SetShowValue (false );_dcgda .Labels ().SetShowPercent (false );_dcgda .Labels ().SetShowCategoryName (false );_dcgda .Labels ().SetShowSeriesName (false );
_dcgda .Labels ().SetShowLeaderLines (false );};func MakeCategoryAxis (x *_c .CT_CatAx )CategoryAxis {return CategoryAxis {x }};

// SetIndex sets the index of the series
func (_abdfd ScatterChartSeries )SetIndex (idx uint32 ){_abdfd ._aedc .Idx .ValAttr =idx };type DateAxis struct{_gca *_c .CT_DateAx };

// AddSurfaceChart adds a new surface chart to a chart.
func (_fge Chart )AddSurfaceChart ()SurfaceChart {_efc :=_c .NewCT_PlotAreaChoice ();_fge ._agg .Chart .PlotArea .Choice =append (_fge ._agg .Chart .PlotArea .Choice ,_efc );_efc .SurfaceChart =_c .NewCT_SurfaceChart ();_dgfc (_fge ._agg .Chart );_fge ._agg .Chart .View3D .RotX .ValAttr =_f .Int8 (90);
_fge ._agg .Chart .View3D .RotY .ValAttr =_f .Uint16 (0);_fge ._agg .Chart .View3D .Perspective =_c .NewCT_Perspective ();_fge ._agg .Chart .View3D .Perspective .ValAttr =_f .Uint8 (0);_aea :=SurfaceChart {_adca :_efc .SurfaceChart };_aea .InitializeDefaults ();
return _aea ;};

// X returns the inner wrapped XML type.
func (_bd Bar3DChart )X ()*_c .CT_Bar3DChart {return _bd ._ca };func (_dc Area3DChart )AddAxis (axis Axis ){_cb :=_c .NewCT_UnsignedInt ();_cb .ValAttr =axis .AxisID ();_dc ._fcf .AxId =append (_dc ._fcf .AxId ,_cb );};

// X returns the inner wrapped XML type.
func (_ebbd Surface3DChart )X ()*_c .CT_Surface3DChart {return _ebbd ._dddd };

// AreaChartSeries is a series to be used on an area chart.
type AreaChartSeries struct{_fg *_c .CT_AreaSer };

// Marker returns the marker properties.
func (_ddf LineChartSeries )Marker ()Marker {if _ddf ._geea .Marker ==nil {_ddf ._geea .Marker =_c .NewCT_Marker ();};return MakeMarker (_ddf ._geea .Marker );};type nullAxis byte ;

// SetOrder sets the order of the series
func (_ffa ScatterChartSeries )SetOrder (idx uint32 ){_ffa ._aedc .Order .ValAttr =idx };

// Index returns the index of the series
func (_efd SurfaceChartSeries )Index ()uint32 {return _efd ._fcdb .Idx .ValAttr };type NumberDataSource struct{_dee *_c .CT_NumDataSource };

// X returns the inner wrapped XML type.
func (_gg BarChart )X ()*_c .CT_BarChart {return _gg ._ag };

// AddSeries adds a default series to an area chart.
func (_cbb AreaChart )AddSeries ()AreaChartSeries {_cc :=_cbb .nextColor (len (_cbb ._de .Ser ));_fe :=_c .NewCT_AreaSer ();_cbb ._de .Ser =append (_cbb ._de .Ser ,_fe );_fe .Idx .ValAttr =uint32 (len (_cbb ._de .Ser )-1);_fe .Order .ValAttr =uint32 (len (_cbb ._de .Ser )-1);
_fb :=AreaChartSeries {_fe };_fb .InitializeDefaults ();_fb .Properties ().SetSolidFill (_cc );return _fb ;};

// RemoveTitle removes any existing title from the chart.
func (_ddd Chart )RemoveTitle (){_ddd ._agg .Chart .Title =nil ;_ddd ._agg .Chart .AutoTitleDeleted =_c .NewCT_Boolean ();_ddd ._agg .Chart .AutoTitleDeleted .ValAttr =_f .Bool (true );};func (_bed Chart )AddSeriesAxis ()SeriesAxis {_fda :=_c .NewCT_SerAx ();
if _bed ._agg .Chart .PlotArea .CChoice ==nil {_bed ._agg .Chart .PlotArea .CChoice =_c .NewCT_PlotAreaChoice1 ();};_fda .AxId =_c .NewCT_UnsignedInt ();_fda .AxId .ValAttr =0x7FFFFFFF&_fc .Uint32 ();_bed ._agg .Chart .PlotArea .CChoice .SerAx =append (_bed ._agg .Chart .PlotArea .CChoice .SerAx ,_fda );
_fda .Delete =_c .NewCT_Boolean ();_fda .Delete .ValAttr =_f .Bool (false );_cedf :=MakeSeriesAxis (_fda );_cedf .InitializeDefaults ();return _cedf ;};type Line3DChart struct{chartBase ;_ece *_c .CT_Line3DChart ;};func (_fbc BarChart )AddAxis (axis Axis ){_bb :=_c .NewCT_UnsignedInt ();
_bb .ValAttr =axis .AxisID ();_fbc ._ag .AxId =append (_fbc ._ag .AxId ,_bb );};

// InitializeDefaults the Stock chart to its defaults
func (_ageb StockChart )InitializeDefaults (){_ageb ._egdb .HiLowLines =_c .NewCT_ChartLines ();_ageb ._egdb .UpDownBars =_c .NewCT_UpDownBars ();_ageb ._egdb .UpDownBars .GapWidth =_c .NewCT_GapAmount ();_ageb ._egdb .UpDownBars .GapWidth .ValAttr =&_c .ST_GapAmount {};
_ageb ._egdb .UpDownBars .GapWidth .ValAttr .ST_GapAmountUShort =_f .Uint16 (150);_ageb ._egdb .UpDownBars .UpBars =_c .NewCT_UpDownBar ();_ageb ._egdb .UpDownBars .DownBars =_c .NewCT_UpDownBar ();};

// InitializeDefaults the bar chart to its defaults
func (_cgf Pie3DChart )InitializeDefaults (){_cgf ._cgc .VaryColors =_c .NewCT_Boolean ();_cgf ._cgc .VaryColors .ValAttr =_f .Bool (true );};

// InitializeDefaults initializes an Pie series to the default values.
func (_gfaf PieChartSeries )InitializeDefaults (){};

// Index returns the index of the series
func (_fcd ScatterChartSeries )Index ()uint32 {return _fcd ._aedc .Idx .ValAttr };

// X returns the inner wrapped XML type.
func (_efbg ScatterChart )X ()*_c .CT_ScatterChart {return _efbg ._dccf };

// AddTitle sets a new title on the chart.
func (_ccbb Chart )AddTitle ()Title {_ccbb ._agg .Chart .Title =_c .NewCT_Title ();_ccbb ._agg .Chart .Title .Overlay =_c .NewCT_Boolean ();_ccbb ._agg .Chart .Title .Overlay .ValAttr =_f .Bool (false );_ccbb ._agg .Chart .AutoTitleDeleted =_c .NewCT_Boolean ();
_ccbb ._agg .Chart .AutoTitleDeleted .ValAttr =_f .Bool (false );_ffe :=MakeTitle (_ccbb ._agg .Chart .Title );_ffe .InitializeDefaults ();return _ffe ;};

// SetText sets the series text.
func (_gag RadarChartSeries )SetText (s string ){_gag ._dcc .Tx =_c .NewCT_SerTx ();_gag ._dcc .Tx .Choice .V =&s ;};

// X returns the inner wrapped XML type.
func (_dec BarChartSeries )X ()*_c .CT_BarSer {return _dec ._ff };

// BarChartSeries is a series to be used on a bar chart.
type BarChartSeries struct{_ff *_c .CT_BarSer };func (_gbd DataLabels )SetShowLegendKey (b bool ){_gbd .ensureChoice ();_gbd ._caa .Choice .ShowLegendKey =_c .NewCT_Boolean ();_gbd ._caa .Choice .ShowLegendKey .ValAttr =_f .Bool (b );};func (_baf LineChartSeries )SetSmooth (b bool ){_baf ._geea .Smooth =_c .NewCT_Boolean ();
_baf ._geea .Smooth .ValAttr =&b ;};

// SetValues is used to set the source data to a set of values.
func (_aa CategoryAxisDataSource )SetValues (v []string ){_aa ._gaa .Choice =_c .NewCT_AxDataSourceChoice ();_aa ._gaa .Choice .StrLit =_c .NewCT_StrData ();_aa ._gaa .Choice .StrLit .PtCount =_c .NewCT_UnsignedInt ();_aa ._gaa .Choice .StrLit .PtCount .ValAttr =uint32 (len (v ));
for _gbg ,_gd :=range v {_aa ._gaa .Choice .StrLit .Pt =append (_aa ._gaa .Choice .StrLit .Pt ,&_c .CT_StrVal {IdxAttr :uint32 (_gbg ),V :_gd });};};

// X returns the inner wrapped XML type.
func (_a AreaChart )X ()*_c .CT_AreaChart {return _a ._de };func (_dbd LineChartSeries )CategoryAxis ()CategoryAxisDataSource {if _dbd ._geea .Cat ==nil {_dbd ._geea .Cat =_c .NewCT_AxDataSource ();};return MakeAxisDataSource (_dbd ._geea .Cat );};

// AddCategoryAxis adds a category axis.
func (_bab Chart )AddCategoryAxis ()CategoryAxis {_eecf :=_c .NewCT_CatAx ();if _bab ._agg .Chart .PlotArea .CChoice ==nil {_bab ._agg .Chart .PlotArea .CChoice =_c .NewCT_PlotAreaChoice1 ();};_eecf .AxId =_c .NewCT_UnsignedInt ();_eecf .AxId .ValAttr =0x7FFFFFFF&_fc .Uint32 ();
_bab ._agg .Chart .PlotArea .CChoice .CatAx =append (_bab ._agg .Chart .PlotArea .CChoice .CatAx ,_eecf );_eecf .Auto =_c .NewCT_Boolean ();_eecf .Auto .ValAttr =_f .Bool (true );_eecf .Delete =_c .NewCT_Boolean ();_eecf .Delete .ValAttr =_f .Bool (false );
_geg :=MakeCategoryAxis (_eecf );_geg .InitializeDefaults ();return _geg ;};

// SurfaceChart is a 3D surface chart, viewed from the top-down.
type SurfaceChart struct{chartBase ;_adca *_c .CT_SurfaceChart ;};func (_bggd ValueAxis )SetMajorTickMark (m _c .ST_TickMark ){if m ==_c .ST_TickMarkUnset {_bggd ._cec .MajorTickMark =nil ;}else {_bggd ._cec .MajorTickMark =_c .NewCT_TickMark ();_bggd ._cec .MajorTickMark .ValAttr =m ;
};};

// InitializeDefaults the bar chart to its defaults
func (_cbac RadarChart )InitializeDefaults (){_cbac ._aed .RadarStyle .ValAttr =_c .ST_RadarStyleMarker };

// BarChart is a 2D bar chart.
type BarChart struct{chartBase ;_ag *_c .CT_BarChart ;};

// InitializeDefaults the bar chart to its defaults
func (_gb Area3DChart )InitializeDefaults (){};

// X returns the inner wrapped XML type.
func (_cagd RadarChart )X ()*_c .CT_RadarChart {return _cagd ._aed };

// X returns the inner wrapped XML type.
func (_fff SurfaceChartSeries )X ()*_c .CT_SurfaceSer {return _fff ._fcdb };

// SetText sets the series text.
func (_fgb BubbleChartSeries )SetText (s string ){_fgb ._dcg .Tx =_c .NewCT_SerTx ();_fgb ._dcg .Tx .Choice .V =&s ;};

// AddSeries adds a default series to a bar chart.
func (_ccb BarChart )AddSeries ()BarChartSeries {_fbg :=_ccb .nextColor (len (_ccb ._ag .Ser ));_ggf :=_c .NewCT_BarSer ();_ccb ._ag .Ser =append (_ccb ._ag .Ser ,_ggf );_ggf .Idx .ValAttr =uint32 (len (_ccb ._ag .Ser )-1);_ggf .Order .ValAttr =uint32 (len (_ccb ._ag .Ser )-1);
_gfd :=BarChartSeries {_ggf };_gfd .InitializeDefaults ();_gfd .Properties ().SetSolidFill (_fbg );return _gfd ;};

// MakeAxisDataSource constructs an AxisDataSource wrapper.
func MakeAxisDataSource (x *_c .CT_AxDataSource )CategoryAxisDataSource {return CategoryAxisDataSource {x };};

// AddDoughnutChart adds a new doughnut (pie with a hole in the center) chart to a chart.
func (_fec Chart )AddDoughnutChart ()DoughnutChart {_adb :=_c .NewCT_PlotAreaChoice ();_fec ._agg .Chart .PlotArea .Choice =append (_fec ._agg .Chart .PlotArea .Choice ,_adb );_adb .DoughnutChart =_c .NewCT_DoughnutChart ();_fba :=DoughnutChart {_fee :_adb .DoughnutChart };
_fba .InitializeDefaults ();return _fba ;};func (_fgf GridLines )Properties ()_fd .ShapeProperties {if _fgf ._ecd .SpPr ==nil {_fgf ._ecd .SpPr =_d .NewCT_ShapeProperties ();};return _fd .MakeShapeProperties (_fgf ._ecd .SpPr );};func (_fcb SeriesAxis )AxisID ()uint32 {return _fcb ._ccga .AxId .ValAttr };


// PieChart is a Pie chart.
type PieChart struct{chartBase ;_acf *_c .CT_PieChart ;};func (_ac Legend )SetPosition (p _c .ST_LegendPos ){if p ==_c .ST_LegendPosUnset {_ac ._bde .LegendPos =nil ;}else {_ac ._bde .LegendPos =_c .NewCT_LegendPos ();_ac ._bde .LegendPos .ValAttr =p ;
};};

// InitializeDefaults the Bubble chart to its defaults
func (_ede BubbleChart )InitializeDefaults (){};func (_gac LineChartSeries )Values ()NumberDataSource {if _gac ._geea .Val ==nil {_gac ._geea .Val =_c .NewCT_NumDataSource ();};return MakeNumberDataSource (_gac ._geea .Val );};

// AddLineChart adds a new line chart to a chart.
func (_abb Chart )AddLineChart ()LineChart {_eda :=_c .NewCT_PlotAreaChoice ();_abb ._agg .Chart .PlotArea .Choice =append (_abb ._agg .Chart .PlotArea .Choice ,_eda );_eda .LineChart =_c .NewCT_LineChart ();_eda .LineChart .Grouping =_c .NewCT_Grouping ();
_eda .LineChart .Grouping .ValAttr =_c .ST_GroupingStandard ;return LineChart {_gdcb :_eda .LineChart };};

// AddAxis adds an axis to a line chart.
func (_eebb Line3DChart )AddAxis (axis Axis ){_dda :=_c .NewCT_UnsignedInt ();_dda .ValAttr =axis .AxisID ();_eebb ._ece .AxId =append (_eebb ._ece .AxId ,_dda );};

// X returns the inner wrapped XML type.
func (_eae PieChartSeries )X ()*_c .CT_PieSer {return _eae ._adg };func (_dcgdc ScatterChartSeries )CategoryAxis ()CategoryAxisDataSource {if _dcgdc ._aedc .XVal ==nil {_dcgdc ._aedc .XVal =_c .NewCT_AxDataSource ();};return MakeAxisDataSource (_dcgdc ._aedc .XVal );
};

// AddSeries adds a default series to a Stock chart.
func (_fcg StockChart )AddSeries ()LineChartSeries {_gga :=_c .NewCT_LineSer ();_fcg ._egdb .Ser =append (_fcg ._egdb .Ser ,_gga );_gga .Idx .ValAttr =uint32 (len (_fcg ._egdb .Ser )-1);_gga .Order .ValAttr =uint32 (len (_fcg ._egdb .Ser )-1);_efcg :=LineChartSeries {_gga };
_efcg .Values ().CreateEmptyNumberCache ();_efcg .Properties ().LineProperties ().SetNoFill ();return _efcg ;};func (_bae StockChart )AddAxis (axis Axis ){_gbe :=_c .NewCT_UnsignedInt ();_gbe .ValAttr =axis .AxisID ();_bae ._egdb .AxId =append (_bae ._egdb .AxId ,_gbe );
};func (_b AreaChart )AddAxis (axis Axis ){_ccg :=_c .NewCT_UnsignedInt ();_ccg .ValAttr =axis .AxisID ();_b ._de .AxId =append (_b ._de .AxId ,_ccg );};

// AddPieChart adds a new pie chart to a chart.
func (_bef Chart )AddPieChart ()PieChart {_bga :=_c .NewCT_PlotAreaChoice ();_bef ._agg .Chart .PlotArea .Choice =append (_bef ._agg .Chart .PlotArea .Choice ,_bga );_bga .PieChart =_c .NewCT_PieChart ();_ffd :=PieChart {_acf :_bga .PieChart };_ffd .InitializeDefaults ();
return _ffd ;};func (_abd CategoryAxis )MajorGridLines ()GridLines {if _abd ._dd .MajorGridlines ==nil {_abd ._dd .MajorGridlines =_c .NewCT_ChartLines ();};return GridLines {_abd ._dd .MajorGridlines };};func (_bbd Legend )SetOverlay (b bool ){_bbd ._bde .Overlay =_c .NewCT_Boolean ();
_bbd ._bde .Overlay .ValAttr =_f .Bool (b );};

// Chart is a generic chart.
type Chart struct{_agg *_c .ChartSpace };

// X returns the inner wrapped XML type.
func (_be BubbleChart )X ()*_c .CT_BubbleChart {return _be ._aeg };func (_bcf SeriesAxis )InitializeDefaults (){};func (_bbc CategoryAxis )AxisID ()uint32 {return _bbc ._dd .AxId .ValAttr };

// X returns the inner wrapped XML type.
func (_e Area3DChart )X ()*_c .CT_Area3DChart {return _e ._fcf };func (_dgc Title )SetText (s string ){if _dgc ._gcf .Tx ==nil {_dgc ._gcf .Tx =_c .NewCT_Tx ();};if _dgc ._gcf .Tx .Choice .Rich ==nil {_dgc ._gcf .Tx .Choice .Rich =_d .NewCT_TextBody ();
};var _ded *_d .CT_TextParagraph ;if len (_dgc ._gcf .Tx .Choice .Rich .P )==0{_ded =_d .NewCT_TextParagraph ();_dgc ._gcf .Tx .Choice .Rich .P =[]*_d .CT_TextParagraph {_ded };}else {_ded =_dgc ._gcf .Tx .Choice .Rich .P [0];};var _bgf *_d .EG_TextRun ;
if len (_ded .EG_TextRun )==0{_bgf =_d .NewEG_TextRun ();_ded .EG_TextRun =[]*_d .EG_TextRun {_bgf };}else {_bgf =_ded .EG_TextRun [0];};if _bgf .R ==nil {_bgf .R =_d .NewCT_RegularTextRun ();};_bgf .R .T =s ;};

// AddSeries adds a default series to an Doughnut chart.
func (_fdg DoughnutChart )AddSeries ()PieChartSeries {_afaf :=_c .NewCT_PieSer ();_fdg ._fee .Ser =append (_fdg ._fee .Ser ,_afaf );_afaf .Idx .ValAttr =uint32 (len (_fdg ._fee .Ser )-1);_afaf .Order .ValAttr =uint32 (len (_fdg ._fee .Ser )-1);_ggfc :=PieChartSeries {_afaf };
_ggfc .InitializeDefaults ();return _ggfc ;};

// InitializeDefaults the bar chart to its defaults
func (_abf Bar3DChart )InitializeDefaults (){_abf .SetDirection (_c .ST_BarDirCol )};

// InitializeDefaults initializes a Bubble chart series to the default values.
func (_bca BubbleChartSeries )InitializeDefaults (){};

// PieOfPieChart is a Pie chart with an extra Pie chart.
type PieOfPieChart struct{chartBase ;_aef *_c .CT_OfPieChart ;};

// AddPie3DChart adds a new pie chart to a chart.
func (_ddg Chart )AddPie3DChart ()Pie3DChart {_dgfc (_ddg ._agg .Chart );_gab :=_c .NewCT_PlotAreaChoice ();_ddg ._agg .Chart .PlotArea .Choice =append (_ddg ._agg .Chart .PlotArea .Choice ,_gab );_gab .Pie3DChart =_c .NewCT_Pie3DChart ();_afb :=Pie3DChart {_cgc :_gab .Pie3DChart };
_afb .InitializeDefaults ();return _afb ;};func (_abdab DataLabels )SetShowLeaderLines (b bool ){_abdab .ensureChoice ();_abdab ._caa .Choice .ShowLeaderLines =_c .NewCT_Boolean ();_abdab ._caa .Choice .ShowLeaderLines .ValAttr =_f .Bool (b );};

// StockChart is a 2D Stock chart.
type StockChart struct{chartBase ;_egdb *_c .CT_StockChart ;};

// BubbleChartSeries is a series to be used on a Bubble chart.
type BubbleChartSeries struct{_dcg *_c .CT_BubbleSer };

// Properties returns the bar chart series shape properties.
func (_fef AreaChartSeries )Properties ()_fd .ShapeProperties {if _fef ._fg .SpPr ==nil {_fef ._fg .SpPr =_d .NewCT_ShapeProperties ();};return _fd .MakeShapeProperties (_fef ._fg .SpPr );};func (_gabc NumberDataSource )ensureChoice (){if _gabc ._dee .Choice ==nil {_gabc ._dee .Choice =_c .NewCT_NumDataSourceChoice ();
};};type Title struct{_gcf *_c .CT_Title };type Marker struct{_dbge *_c .CT_Marker };

// X returns the inner wrapped XML type.
func (_dcb BubbleChartSeries )X ()*_c .CT_BubbleSer {return _dcb ._dcg };

// X returns the inner wrapped XML type.
func (_dfd ScatterChartSeries )X ()*_c .CT_ScatterSer {return _dfd ._aedc };

// X returns the inner wrapped XML type.
func (_cede LineChart )X ()*_c .CT_LineChart {return _cede ._gdcb };

// AddSurface3DChart adds a new 3D surface chart to a chart.
func (_dae Chart )AddSurface3DChart ()Surface3DChart {_eff :=_c .NewCT_PlotAreaChoice ();_dae ._agg .Chart .PlotArea .Choice =append (_dae ._agg .Chart .PlotArea .Choice ,_eff );_eff .Surface3DChart =_c .NewCT_Surface3DChart ();_dgfc (_dae ._agg .Chart );
_aab :=Surface3DChart {_dddd :_eff .Surface3DChart };_aab .InitializeDefaults ();return _aab ;};

// AddSeries adds a default series to a bar chart.
func (_ae Bar3DChart )AddSeries ()BarChartSeries {_faa :=_ae .nextColor (len (_ae ._ca .Ser ));_gfb :=_c .NewCT_BarSer ();_ae ._ca .Ser =append (_ae ._ca .Ser ,_gfb );_gfb .Idx .ValAttr =uint32 (len (_ae ._ca .Ser )-1);_gfb .Order .ValAttr =uint32 (len (_ae ._ca .Ser )-1);
_ad :=BarChartSeries {_gfb };_ad .InitializeDefaults ();_ad .Properties ().SetSolidFill (_faa );return _ad ;};

// Values returns the value data source.
func (_ecb PieChartSeries )Values ()NumberDataSource {if _ecb ._adg .Val ==nil {_ecb ._adg .Val =_c .NewCT_NumDataSource ();};return MakeNumberDataSource (_ecb ._adg .Val );};

// DoughnutChart is a Doughnut chart.
type DoughnutChart struct{chartBase ;_fee *_c .CT_DoughnutChart ;};

// AddLine3DChart adds a new 3D line chart to a chart.
func (_afa Chart )AddLine3DChart ()Line3DChart {_dgfc (_afa ._agg .Chart );_abda :=_c .NewCT_PlotAreaChoice ();_afa ._agg .Chart .PlotArea .Choice =append (_afa ._agg .Chart .PlotArea .Choice ,_abda );_abda .Line3DChart =_c .NewCT_Line3DChart ();_abda .Line3DChart .Grouping =_c .NewCT_Grouping ();
_abda .Line3DChart .Grouping .ValAttr =_c .ST_GroupingStandard ;return Line3DChart {_ece :_abda .Line3DChart };};

// AddSeries adds a default series to an Radar chart.
func (_afc RadarChart )AddSeries ()RadarChartSeries {_abff :=_afc .nextColor (len (_afc ._aed .Ser ));_ccc :=_c .NewCT_RadarSer ();_afc ._aed .Ser =append (_afc ._aed .Ser ,_ccc );_ccc .Idx .ValAttr =uint32 (len (_afc ._aed .Ser )-1);_ccc .Order .ValAttr =uint32 (len (_afc ._aed .Ser )-1);
_afcb :=RadarChartSeries {_ccc };_afcb .InitializeDefaults ();_afcb .Properties ().SetSolidFill (_abff );return _afcb ;};

// SetDirection changes the direction of the bar chart (bar or column).
func (_af Bar3DChart )SetDirection (d _c .ST_BarDir ){_af ._ca .BarDir .ValAttr =d };

// AddSeries adds a default series to an area chart.
func (_fa Area3DChart )AddSeries ()AreaChartSeries {_fdb :=_fa .nextColor (len (_fa ._fcf .Ser ));_cda :=_c .NewCT_AreaSer ();_fa ._fcf .Ser =append (_fa ._fcf .Ser ,_cda );_cda .Idx .ValAttr =uint32 (len (_fa ._fcf .Ser )-1);_cda .Order .ValAttr =uint32 (len (_fa ._fcf .Ser )-1);
_ef :=AreaChartSeries {_cda };_ef .InitializeDefaults ();_ef .Properties ().SetSolidFill (_fdb );return _ef ;};func (_cag CategoryAxis )SetTickLabelPosition (p _c .ST_TickLblPos ){if p ==_c .ST_TickLblPosUnset {_cag ._dd .TickLblPos =nil ;}else {_cag ._dd .TickLblPos =_c .NewCT_TickLblPos ();
_cag ._dd .TickLblPos .ValAttr =p ;};};

// RadarChartSeries is a series to be used on an Radar chart.
type RadarChartSeries struct{_dcc *_c .CT_RadarSer };func (_feb Marker )SetSymbol (s _c .ST_MarkerStyle ){if s ==_c .ST_MarkerStyleUnset {_feb ._dbge .Symbol =nil ;}else {_feb ._dbge .Symbol =_c .NewCT_MarkerStyle ();_feb ._dbge .Symbol .ValAttr =s ;};
};

// CategoryAxis returns the category data source.
func (_gbf BarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _gbf ._ff .Cat ==nil {_gbf ._ff .Cat =_c .NewCT_AxDataSource ();};return MakeAxisDataSource (_gbf ._ff .Cat );};

// LineChartSeries is the data series for a line chart.
type LineChartSeries struct{_geea *_c .CT_LineSer };func (_cfe DateAxis )AxisID ()uint32 {return _cfe ._gca .AxId .ValAttr };

// Order returns the order of the series
func (_cfa SurfaceChartSeries )Order ()uint32 {return _cfa ._fcdb .Order .ValAttr };func (_debd Title )InitializeDefaults (){_debd .SetText ("\u0054\u0069\u0074l\u0065");_debd .RunProperties ().SetSize (16*_gf .Point );_debd .RunProperties ().SetSolidFill (_cd .Black );
_debd .RunProperties ().SetFont ("\u0043\u0061\u006c\u0069\u0062\u0020\u0072\u0069");_debd .RunProperties ().SetBold (false );};func (_eca DateAxis )SetCrosses (axis Axis ){_eca ._gca .CrossAx .ValAttr =axis .AxisID ()};

// ScatterChartSeries is the data series for a scatter chart.
type ScatterChartSeries struct{_aedc *_c .CT_ScatterSer };func (_ed nullAxis )AxisID ()uint32 {return 0};func (_ebb ScatterChartSeries )Values ()NumberDataSource {if _ebb ._aedc .YVal ==nil {_ebb ._aedc .YVal =_c .NewCT_NumDataSource ();};return MakeNumberDataSource (_ebb ._aedc .YVal );
};

// SetLabelReference is used to set the source data to a range of cells
// containing strings.
func (_dga CategoryAxisDataSource )SetLabelReference (s string ){_dga ._gaa .Choice =_c .NewCT_AxDataSourceChoice ();_dga ._gaa .Choice .StrRef =_c .NewCT_StrRef ();_dga ._gaa .Choice .StrRef .F =s ;};func _dgfc (_bcc *_c .CT_Chart ){_bcc .View3D =_c .NewCT_View3D ();
_bcc .View3D .RotX =_c .NewCT_RotX ();_bcc .View3D .RotX .ValAttr =_f .Int8 (15);_bcc .View3D .RotY =_c .NewCT_RotY ();_bcc .View3D .RotY .ValAttr =_f .Uint16 (20);_bcc .View3D .RAngAx =_c .NewCT_Boolean ();_bcc .View3D .RAngAx .ValAttr =_f .Bool (false );
_bcc .Floor =_c .NewCT_Surface ();_bcc .Floor .Thickness =_c .NewCT_Thickness ();_bcc .Floor .Thickness .ValAttr .Uint32 =_f .Uint32 (0);_bcc .SideWall =_c .NewCT_Surface ();_bcc .SideWall .Thickness =_c .NewCT_Thickness ();_bcc .SideWall .Thickness .ValAttr .Uint32 =_f .Uint32 (0);
_bcc .BackWall =_c .NewCT_Surface ();_bcc .BackWall .Thickness =_c .NewCT_Thickness ();_bcc .BackWall .Thickness .ValAttr .Uint32 =_f .Uint32 (0);};type ScatterChart struct{chartBase ;_dccf *_c .CT_ScatterChart ;};func (_ggb Marker )SetSize (sz uint8 ){_ggb ._dbge .Size =_c .NewCT_MarkerSize ();
_ggb ._dbge .Size .ValAttr =&sz ;};

// AddAxis adds an axis to a Scatter chart.
func (_dba ScatterChart )AddAxis (axis Axis ){_gbb :=_c .NewCT_UnsignedInt ();_gbb .ValAttr =axis .AxisID ();_dba ._dccf .AxId =append (_dba ._dccf .AxId ,_gbb );};

// X returns the inner wrapped XML type.
func (_eagc Title )X ()*_c .CT_Title {return _eagc ._gcf };

// Order returns the order of the series
func (_fag ScatterChartSeries )Order ()uint32 {return _fag ._aedc .Order .ValAttr };

// AddAxis adds an axis to a Surface chart.
func (_edf SurfaceChart )AddAxis (axis Axis ){_bbdd :=_c .NewCT_UnsignedInt ();_bbdd .ValAttr =axis .AxisID ();_edf ._adca .AxId =append (_edf ._adca .AxId ,_bbdd );};

// CategoryAxis returns the category data source.
func (_gfc PieChartSeries )CategoryAxis ()CategoryAxisDataSource {if _gfc ._adg .Cat ==nil {_gfc ._adg .Cat =_c .NewCT_AxDataSource ();};return MakeAxisDataSource (_gfc ._adg .Cat );};

// CreateEmptyNumberCache creates an empty number cache, which is used sometimes
// to increase file format compatibility.  It should actually contain the
// computed cell data, but just creating an empty one is good enough.
func (_bdd NumberDataSource )CreateEmptyNumberCache (){_bdd .ensureChoice ();if _bdd ._dee .Choice .NumRef ==nil {_bdd ._dee .Choice .NumRef =_c .NewCT_NumRef ();};_bdd ._dee .Choice .NumLit =nil ;_bdd ._dee .Choice .NumRef .NumCache =_c .NewCT_NumData ();
_bdd ._dee .Choice .NumRef .NumCache .PtCount =_c .NewCT_UnsignedInt ();_bdd ._dee .Choice .NumRef .NumCache .PtCount .ValAttr =0;};

// AddPieOfPieChart adds a new pie chart to a chart.
func (_afe Chart )AddPieOfPieChart ()PieOfPieChart {_gdc :=_c .NewCT_PlotAreaChoice ();_afe ._agg .Chart .PlotArea .Choice =append (_afe ._agg .Chart .PlotArea .Choice ,_gdc );_gdc .OfPieChart =_c .NewCT_OfPieChart ();_cdf :=PieOfPieChart {_aef :_gdc .OfPieChart };
_cdf .InitializeDefaults ();return _cdf ;};func MakeValueAxis (x *_c .CT_ValAx )ValueAxis {return ValueAxis {x }};

// Properties returns the chart's shape properties.
func (_bdgf Chart )Properties ()_fd .ShapeProperties {if _bdgf ._agg .SpPr ==nil {_bdgf ._agg .SpPr =_d .NewCT_ShapeProperties ();};return _fd .MakeShapeProperties (_bdgf ._agg .SpPr );};

// Properties returns the line chart series shape properties.
func (_cbg SurfaceChartSeries )Properties ()_fd .ShapeProperties {if _cbg ._fcdb .SpPr ==nil {_cbg ._fcdb .SpPr =_d .NewCT_ShapeProperties ();};return _fd .MakeShapeProperties (_cbg ._fcdb .SpPr );};func (_agec RadarChart )AddAxis (axis Axis ){_gdg :=_c .NewCT_UnsignedInt ();
_gdg .ValAttr =axis .AxisID ();_agec ._aed .AxId =append (_agec ._aed .AxId ,_gdg );};func MakeDataLabels (x *_c .CT_DLbls )DataLabels {return DataLabels {x }};

// AddSeries adds a default series to a Surface chart.
func (_eaf SurfaceChart )AddSeries ()SurfaceChartSeries {_ddddc :=_eaf .nextColor (len (_eaf ._adca .Ser ));_edge :=_c .NewCT_SurfaceSer ();_eaf ._adca .Ser =append (_eaf ._adca .Ser ,_edge );_edge .Idx .ValAttr =uint32 (len (_eaf ._adca .Ser )-1);_edge .Order .ValAttr =uint32 (len (_eaf ._adca .Ser )-1);
_begc :=SurfaceChartSeries {_edge };_begc .InitializeDefaults ();_begc .Properties ().LineProperties ().SetSolidFill (_ddddc );return _begc ;};type LineChart struct{chartBase ;_gdcb *_c .CT_LineChart ;};

// AddBar3DChart adds a new 3D bar chart to a chart.
func (_ge Chart )AddBar3DChart ()Bar3DChart {_dgfc (_ge ._agg .Chart );_ccbc :=_c .NewCT_PlotAreaChoice ();_ge ._agg .Chart .PlotArea .Choice =append (_ge ._agg .Chart .PlotArea .Choice ,_ccbc );_ccbc .Bar3DChart =_c .NewCT_Bar3DChart ();_ccbc .Bar3DChart .Grouping =_c .NewCT_BarGrouping ();
_ccbc .Bar3DChart .Grouping .ValAttr =_c .ST_BarGroupingStandard ;_gea :=Bar3DChart {_ca :_ccbc .Bar3DChart };_gea .InitializeDefaults ();return _gea ;};

// Area3DChart is an area chart that has a shaded area underneath a curve.
type Area3DChart struct{chartBase ;_fcf *_c .CT_Area3DChart ;};

// AddRadarChart adds a new radar chart to a chart.
func (_afg Chart )AddRadarChart ()RadarChart {_dcgd :=_c .NewCT_PlotAreaChoice ();_afg ._agg .Chart .PlotArea .Choice =append (_afg ._agg .Chart .PlotArea .Choice ,_dcgd );_dcgd .RadarChart =_c .NewCT_RadarChart ();_eg :=RadarChart {_aed :_dcgd .RadarChart };
_eg .InitializeDefaults ();return _eg ;};

// Axis is the interface implemented by different axes when assigning to a
// chart.
type Axis interface{AxisID ()uint32 ;};

// AddSeries adds a default series to an Pie chart.
func (_ggd PieOfPieChart )AddSeries ()PieChartSeries {_abdf :=_c .NewCT_PieSer ();_ggd ._aef .Ser =append (_ggd ._aef .Ser ,_abdf );_abdf .Idx .ValAttr =uint32 (len (_ggd ._aef .Ser )-1);_abdf .Order .ValAttr =uint32 (len (_ggd ._aef .Ser )-1);_gda :=PieChartSeries {_abdf };
_gda .InitializeDefaults ();return _gda ;};func MakeLegend (l *_c .CT_Legend )Legend {return Legend {l }};func (_fgc CategoryAxis )SetPosition (p _c .ST_AxPos ){_fgc ._dd .AxPos =_c .NewCT_AxPos ();_fgc ._dd .AxPos .ValAttr =p ;};

// Properties returns the bar chart series shape properties.
func (_gbgd PieChartSeries )Properties ()_fd .ShapeProperties {if _gbgd ._adg .SpPr ==nil {_gbgd ._adg .SpPr =_d .NewCT_ShapeProperties ();};return _fd .MakeShapeProperties (_gbgd ._adg .SpPr );};

// Surface3DChart is a 3D view of a surface chart.
type Surface3DChart struct{chartBase ;_dddd *_c .CT_Surface3DChart ;};func (_gggb SurfaceChart )InitializeDefaults (){_gggb ._adca .Wireframe =_c .NewCT_Boolean ();_gggb ._adca .Wireframe .ValAttr =_f .Bool (false );_gggb ._adca .BandFmts =_c .NewCT_BandFmts ();
for _beg :=0;_beg < 15;_beg ++{_ead :=_c .NewCT_BandFmt ();_ead .Idx .ValAttr =uint32 (_beg );_ead .SpPr =_d .NewCT_ShapeProperties ();_aeeb :=_fd .MakeShapeProperties (_ead .SpPr );_aeeb .SetSolidFill (_gggb .nextColor (_beg ));_gggb ._adca .BandFmts .BandFmt =append (_gggb ._adca .BandFmts .BandFmt ,_ead );
};};func (_eab Surface3DChart )InitializeDefaults (){_eab ._dddd .Wireframe =_c .NewCT_Boolean ();_eab ._dddd .Wireframe .ValAttr =_f .Bool (false );_eab ._dddd .BandFmts =_c .NewCT_BandFmts ();for _fcdc :=0;_fcdc < 15;_fcdc ++{_eea :=_c .NewCT_BandFmt ();
_eea .Idx .ValAttr =uint32 (_fcdc );_eea .SpPr =_d .NewCT_ShapeProperties ();_baa :=_fd .MakeShapeProperties (_eea .SpPr );_baa .SetSolidFill (_eab .nextColor (_fcdc ));_eab ._dddd .BandFmts .BandFmt =append (_eab ._dddd .BandFmts .BandFmt ,_eea );};};


// InitializeDefaults initializes an area series to the default values.
func (_bg AreaChartSeries )InitializeDefaults (){};func (_aga ScatterChart )InitializeDefaults (){_aga ._dccf .ScatterStyle .ValAttr =_c .ST_ScatterStyleMarker ;};

// CategoryAxisDataSource specifies the data for an axis.  It's commonly used with
// SetReference to set the axis data to a range of cells.
type CategoryAxisDataSource struct{_gaa *_c .CT_AxDataSource };

// Properties returns the bar chart series shape properties.
func (_abg RadarChartSeries )Properties ()_fd .ShapeProperties {if _abg ._dcc .SpPr ==nil {_abg ._dcc .SpPr =_d .NewCT_ShapeProperties ();};return _fd .MakeShapeProperties (_abg ._dcc .SpPr );};

// X returns the inner wrapped XML type.
func (_bgg PieOfPieChart )X ()*_c .CT_OfPieChart {return _bgg ._aef };func (_beeg NumberDataSource )SetReference (s string ){_beeg .ensureChoice ();if _beeg ._dee .Choice .NumRef ==nil {_beeg ._dee .Choice .NumRef =_c .NewCT_NumRef ();};_beeg ._dee .Choice .NumRef .F =s ;
};

// SetType sets the type the secone pie to either pie or bar
func (_gde PieOfPieChart )SetType (t _c .ST_OfPieType ){_gde ._aef .OfPieType .ValAttr =t };

// SetText sets the series text
func (_dbf SurfaceChartSeries )SetText (s string ){_dbf ._fcdb .Tx =_c .NewCT_SerTx ();_dbf ._fcdb .Tx .Choice .V =&s ;};

// SetOrder sets the order of the series
func (_bbfd LineChartSeries )SetOrder (idx uint32 ){_bbfd ._geea .Order .ValAttr =idx };

// AddSeries adds a default series to a Bubble chart.
func (_dgb BubbleChart )AddSeries ()BubbleChartSeries {_dgf :=_dgb .nextColor (len (_dgb ._aeg .Ser ));_ea :=_c .NewCT_BubbleSer ();_dgb ._aeg .Ser =append (_dgb ._aeg .Ser ,_ea );_ea .Idx .ValAttr =uint32 (len (_dgb ._aeg .Ser )-1);_ea .Order .ValAttr =uint32 (len (_dgb ._aeg .Ser )-1);
_bc :=BubbleChartSeries {_ea };_bc .InitializeDefaults ();_bc .Properties ().SetSolidFill (_dgf );return _bc ;};func (_dece DataLabels )SetShowCategoryName (b bool ){_dece .ensureChoice ();_dece ._caa .Choice .ShowCatName =_c .NewCT_Boolean ();_dece ._caa .Choice .ShowCatName .ValAttr =_f .Bool (b );
};

// InitializeDefaults the bar chart to its defaults
func (_fce AreaChart )InitializeDefaults (){};func (_edc DataLabels )ensureChoice (){if _edc ._caa .Choice ==nil {_edc ._caa .Choice =_c .NewCT_DLblsChoice ();};};

// SetIndex sets the index of the series
func (_ccfa SurfaceChartSeries )SetIndex (idx uint32 ){_ccfa ._fcdb .Idx .ValAttr =idx };type SurfaceChartSeries struct{_fcdb *_c .CT_SurfaceSer };

// Values returns the value data source.
func (_edg BarChartSeries )Values ()NumberDataSource {if _edg ._ff .Val ==nil {_edg ._ff .Val =_c .NewCT_NumDataSource ();};return MakeNumberDataSource (_edg ._ff .Val );};var _dfa =[]_cd .Color {_cd .RGB (0x33,0x66,0xcc),_cd .RGB (0xDC,0x39,0x12),_cd .RGB (0xFF,0x99,0x00),_cd .RGB (0x10,0x96,0x18),_cd .RGB (0x99,0x00,0x99),_cd .RGB (0x3B,0x3E,0xAC),_cd .RGB (0x00,0x99,0xC6),_cd .RGB (0xDD,0x44,0x77),_cd .RGB (0x66,0xAA,0x00),_cd .RGB (0xB8,0x2E,0x2E),_cd .RGB (0x31,0x63,0x95),_cd .RGB (0x99,0x44,0x99),_cd .RGB (0x22,0xAA,0x99),_cd .RGB (0xAA,0xAA,0x11),_cd .RGB (0x66,0x33,0xCC),_cd .RGB (0xE6,0x73,0x00),_cd .RGB (0x8B,0x07,0x07),_cd .RGB (0x32,0x92,0x62),_cd .RGB (0x55,0x74,0xA6),_cd .RGB (0x3B,0x3E,0xAC)};
func MakeMarker (x *_c .CT_Marker )Marker {return Marker {x }};type chartBase struct{};

// InitializeDefaults initializes a bar chart series to the default values.
func (_cfd BarChartSeries )InitializeDefaults (){};

// InitializeDefaults initializes an Radar series to the default values.
func (_dag RadarChartSeries )InitializeDefaults (){};

// Marker returns the marker properties.
func (_dac ScatterChartSeries )Marker ()Marker {if _dac ._aedc .Marker ==nil {_dac ._aedc .Marker =_c .NewCT_Marker ();};return MakeMarker (_dac ._aedc .Marker );};func (_cga SeriesAxis )SetCrosses (axis Axis ){_cga ._ccga .CrossAx .ValAttr =axis .AxisID ()};


// RemoveLegend removes the legend if the chart has one.
func (_adcc Chart )RemoveLegend (){_adcc ._agg .Chart .Legend =nil };

// X returns the inner wrapped XML type.
func (_eecd Legend )X ()*_c .CT_Legend {return _eecd ._bde };func (_ggc DataLabels )SetPosition (p _c .ST_DLblPos ){_ggc .ensureChoice ();_ggc ._caa .Choice .DLblPos =_c .NewCT_DLblPos ();_ggc ._caa .Choice .DLblPos .ValAttr =p ;};

// SetExplosion sets the value that the segements of the pie are 'exploded' by
func (_gef PieChartSeries )SetExplosion (v uint32 ){_gef ._adg .Explosion =_c .NewCT_UnsignedInt ();_gef ._adg .Explosion .ValAttr =v ;};

// AddSeries adds a default series to a Scatter chart.
func (_fea ScatterChart )AddSeries ()ScatterChartSeries {_bcg :=_fea .nextColor (len (_fea ._dccf .Ser ));_cege :=_c .NewCT_ScatterSer ();_fea ._dccf .Ser =append (_fea ._dccf .Ser ,_cege );_cege .Idx .ValAttr =uint32 (len (_fea ._dccf .Ser )-1);_cege .Order .ValAttr =uint32 (len (_fea ._dccf .Ser )-1);
_adbe :=ScatterChartSeries {_cege };_adbe .InitializeDefaults ();_adbe .Marker ().Properties ().LineProperties ().SetSolidFill (_bcg );_adbe .Marker ().Properties ().SetSolidFill (_bcg );return _adbe ;};

// Bar3DChart is a 3D bar chart.
type Bar3DChart struct{chartBase ;_ca *_c .CT_Bar3DChart ;};

// SetText sets the series text.
func (_cbd AreaChartSeries )SetText (s string ){_cbd ._fg .Tx =_c .NewCT_SerTx ();_cbd ._fg .Tx .Choice .V =&s ;};

// X returns the inner wrapped XML type.
func (_gfcb StockChart )X ()*_c .CT_StockChart {return _gfcb ._egdb };

// AddAxis adds an axis to a Surface chart.
func (_aae Surface3DChart )AddAxis (axis Axis ){_bad :=_c .NewCT_UnsignedInt ();_bad .ValAttr =axis .AxisID ();_aae ._dddd .AxId =append (_aae ._dddd .AxId ,_bad );};func (_afge ValueAxis )SetMinorTickMark (m _c .ST_TickMark ){if m ==_c .ST_TickMarkUnset {_afge ._cec .MinorTickMark =nil ;
}else {_afge ._cec .MinorTickMark =_c .NewCT_TickMark ();_afge ._cec .MinorTickMark .ValAttr =m ;};};

// Properties returns the bar chart series shape properties.
func (_fgg BarChartSeries )Properties ()_fd .ShapeProperties {if _fgg ._ff .SpPr ==nil {_fgg ._ff .SpPr =_d .NewCT_ShapeProperties ();};return _fd .MakeShapeProperties (_fgg ._ff .SpPr );};

// Index returns the index of the series
func (_ceg LineChartSeries )Index ()uint32 {return _ceg ._geea .Idx .ValAttr };type ValueAxis struct{_cec *_c .CT_ValAx };

// X returns the inner wrapped XML type.
func (_cba Line3DChart )X ()*_c .CT_Line3DChart {return _cba ._ece };func (_def BubbleChart )AddAxis (axis Axis ){_fggc :=_c .NewCT_UnsignedInt ();_fggc .ValAttr =axis .AxisID ();_def ._aeg .AxId =append (_def ._aeg .AxId ,_fggc );};

// Pie3DChart is a Pie3D chart.
type Pie3DChart struct{chartBase ;_cgc *_c .CT_Pie3DChart ;};

// X returns the inner wrapped XML type.
func (_db DoughnutChart )X ()*_c .CT_DoughnutChart {return _db ._fee };

// AddSeries adds a default series to a line chart.
func (_gfa LineChart )AddSeries ()LineChartSeries {_eac :=_gfa .nextColor (len (_gfa ._gdcb .Ser ));_gcad :=_c .NewCT_LineSer ();_gfa ._gdcb .Ser =append (_gfa ._gdcb .Ser ,_gcad );_gcad .Idx .ValAttr =uint32 (len (_gfa ._gdcb .Ser )-1);_gcad .Order .ValAttr =uint32 (len (_gfa ._gdcb .Ser )-1);
_bce :=LineChartSeries {_gcad };_bce .InitializeDefaults ();_bce .Properties ().LineProperties ().SetSolidFill (_eac );return _bce ;};func (_gcc ScatterChartSeries )SetSmooth (b bool ){_gcc ._aedc .Smooth =_c .NewCT_Boolean ();_gcc ._aedc .Smooth .ValAttr =&b ;
};

// AddValueAxis adds a value axis to the chart.
func (_egb Chart )AddValueAxis ()ValueAxis {_gdca :=_c .NewCT_ValAx ();if _egb ._agg .Chart .PlotArea .CChoice ==nil {_egb ._agg .Chart .PlotArea .CChoice =_c .NewCT_PlotAreaChoice1 ();};_gdca .AxId =_c .NewCT_UnsignedInt ();_gdca .AxId .ValAttr =0x7FFFFFFF&_fc .Uint32 ();
_egb ._agg .Chart .PlotArea .CChoice .ValAx =append (_egb ._agg .Chart .PlotArea .CChoice .ValAx ,_gdca );_gdca .Delete =_c .NewCT_Boolean ();_gdca .Delete .ValAttr =_f .Bool (false );_gdca .Scaling =_c .NewCT_Scaling ();_gdca .Scaling .Orientation =_c .NewCT_Orientation ();
_gdca .Scaling .Orientation .ValAttr =_c .ST_OrientationMinMax ;_gdca .Choice =&_c .EG_AxSharedChoice {};_gdca .Choice .Crosses =_c .NewCT_Crosses ();_gdca .Choice .Crosses .ValAttr =_c .ST_CrossesAutoZero ;_gdca .CrossBetween =_c .NewCT_CrossBetween ();
_gdca .CrossBetween .ValAttr =_c .ST_CrossBetweenBetween ;_gbgc :=MakeValueAxis (_gdca );_gbgc .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_cd .LightGray );_gbgc .SetMajorTickMark (_c .ST_TickMarkOut );_gbgc .SetMinorTickMark (_c .ST_TickMarkIn );
_gbgc .SetTickLabelPosition (_c .ST_TickLblPosNextTo );_gbgc .Properties ().LineProperties ().SetSolidFill (_cd .Black );_gbgc .SetPosition (_c .ST_AxPosL );return _gbgc ;};func (_cbec SurfaceChartSeries )InitializeDefaults (){_cbec .Properties ().LineProperties ().SetWidth (1*_gf .Point );
_cbec .Properties ().LineProperties ().SetSolidFill (_cd .Black );_cbec .Properties ().LineProperties ().SetJoin (_fd .LineJoinRound );};

// AddStockChart adds a new stock chart.
func (_eef Chart )AddStockChart ()StockChart {_ec :=_c .NewCT_PlotAreaChoice ();_eef ._agg .Chart .PlotArea .Choice =append (_eef ._agg .Chart .PlotArea .Choice ,_ec );_ec .StockChart =_c .NewCT_StockChart ();_gdd :=StockChart {_egdb :_ec .StockChart };
_gdd .InitializeDefaults ();return _gdd ;};

// SetDirection changes the direction of the bar chart (bar or column).
func (_df BarChart )SetDirection (d _c .ST_BarDir ){_df ._ag .BarDir .ValAttr =d };

// AddSeries adds a default series to a Surface chart.
func (_fdcb Surface3DChart )AddSeries ()SurfaceChartSeries {_dgeg :=_fdcb .nextColor (len (_fdcb ._dddd .Ser ));_eeeb :=_c .NewCT_SurfaceSer ();_fdcb ._dddd .Ser =append (_fdcb ._dddd .Ser ,_eeeb );_eeeb .Idx .ValAttr =uint32 (len (_fdcb ._dddd .Ser )-1);
_eeeb .Order .ValAttr =uint32 (len (_fdcb ._dddd .Ser )-1);_dab :=SurfaceChartSeries {_eeeb };_dab .InitializeDefaults ();_dab .Properties ().LineProperties ().SetSolidFill (_dgeg );return _dab ;};type GridLines struct{_ecd *_c .CT_ChartLines };func (_fgd Title )ParagraphProperties ()_fd .ParagraphProperties {if _fgd ._gcf .Tx ==nil {_fgd .SetText ("");
};if _fgd ._gcf .Tx .Choice .Rich .P [0].PPr ==nil {_fgd ._gcf .Tx .Choice .Rich .P [0].PPr =_d .NewCT_TextParagraphProperties ();};return _fd .MakeParagraphProperties (_fgd ._gcf .Tx .Choice .Rich .P [0].PPr );};

// X returns the inner wrapped XML type.
func (_ab AreaChartSeries )X ()*_c .CT_AreaSer {return _ab ._fg };func (_deb ScatterChartSeries )InitializeDefaults (){_deb .Properties ().LineProperties ().SetNoFill ();_deb .Marker ().SetSymbol (_c .ST_MarkerStyleAuto );_deb .Labels ().SetShowLegendKey (false );
_deb .Labels ().SetShowValue (true );_deb .Labels ().SetShowPercent (false );_deb .Labels ().SetShowCategoryName (false );_deb .Labels ().SetShowSeriesName (false );_deb .Labels ().SetShowLeaderLines (false );};

// AddSeries adds a default series to an Pie3D chart.
func (_gabb Pie3DChart )AddSeries ()PieChartSeries {_dbe :=_c .NewCT_PieSer ();_gabb ._cgc .Ser =append (_gabb ._cgc .Ser ,_dbe );_dbe .Idx .ValAttr =uint32 (len (_gabb ._cgc .Ser )-1);_dbe .Order .ValAttr =uint32 (len (_gabb ._cgc .Ser )-1);_edee :=PieChartSeries {_dbe };
_edee .InitializeDefaults ();return _edee ;};

// InitializeDefaults the bar chart to its defaults
func (_ebaf PieChart )InitializeDefaults (){_ebaf ._acf .VaryColors =_c .NewCT_Boolean ();_ebaf ._acf .VaryColors .ValAttr =_f .Bool (true );};func (_gcadb ValueAxis )AxisID ()uint32 {return _gcadb ._cec .AxId .ValAttr };

// X returns the inner wrapped XML type.
func (_gabe LineChartSeries )X ()*_c .CT_LineSer {return _gabe ._geea };

// AreaChart is an area chart that has a shaded area underneath a curve.
type AreaChart struct{chartBase ;_de *_c .CT_AreaChart ;};func (_aaa Title )RunProperties ()_fd .RunProperties {if _aaa ._gcf .Tx ==nil {_aaa .SetText ("");};if _aaa ._gcf .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr ==nil {_aaa ._gcf .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr =_d .NewCT_TextCharacterProperties ();
};return _fd .MakeRunProperties (_aaa ._gcf .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr );};func (_gcfc ValueAxis )SetTickLabelPosition (p _c .ST_TickLblPos ){if p ==_c .ST_TickLblPosUnset {_gcfc ._cec .TickLblPos =nil ;}else {_gcfc ._cec .TickLblPos =_c .NewCT_TickLblPos ();
_gcfc ._cec .TickLblPos .ValAttr =p ;};};

// InitializeDefaults the bar chart to its defaults
func (_ggg BarChart )InitializeDefaults (){_ggg .SetDirection (_c .ST_BarDirCol )};

// X returns the inner wrapped XML type.
func (_ade SurfaceChart )X ()*_c .CT_SurfaceChart {return _ade ._adca };func (_bcae ValueAxis )Properties ()_fd .ShapeProperties {if _bcae ._cec .SpPr ==nil {_bcae ._cec .SpPr =_d .NewCT_ShapeProperties ();};return _fd .MakeShapeProperties (_bcae ._cec .SpPr );
};

// Values returns the value data source.
func (_eaee RadarChartSeries )Values ()NumberDataSource {if _eaee ._dcc .Val ==nil {_eaee ._dcc .Val =_c .NewCT_NumDataSource ();};return MakeNumberDataSource (_eaee ._dcc .Val );};func (_ccf Marker )Properties ()_fd .ShapeProperties {if _ccf ._dbge .SpPr ==nil {_ccf ._dbge .SpPr =_d .NewCT_ShapeProperties ();
};return _fd .MakeShapeProperties (_ccf ._dbge .SpPr );};func (_gad chartBase )nextColor (_fbcf int )_cd .Color {return _dfa [_fbcf %len (_dfa )]};func (_edgf ValueAxis )SetCrosses (axis Axis ){_edgf ._cec .CrossAx .ValAttr =axis .AxisID ()};

// X returns the inner wrapped XML type.
func (_bcb GridLines )X ()*_c .CT_ChartLines {return _bcb ._ecd };

// SetText sets the series text
func (_accg ScatterChartSeries )SetText (s string ){_accg ._aedc .Tx =_c .NewCT_SerTx ();_accg ._aedc .Tx .Choice .V =&s ;};

// RadarChart is an Radar chart that has a shaded Radar underneath a curve.
type RadarChart struct{chartBase ;_aed *_c .CT_RadarChart ;};func (_ffdg DateAxis )SetMajorTickMark (m _c .ST_TickMark ){if m ==_c .ST_TickMarkUnset {_ffdg ._gca .MajorTickMark =nil ;}else {_ffdg ._gca .MajorTickMark =_c .NewCT_TickMark ();_ffdg ._gca .MajorTickMark .ValAttr =m ;
};};

// BubbleChart is a 2D Bubble chart.
type BubbleChart struct{chartBase ;_aeg *_c .CT_BubbleChart ;};

// SetNumberReference is used to set the source data to a range of cells containing
// numbers.
func (_fdbf CategoryAxisDataSource )SetNumberReference (s string ){_fdbf ._gaa .Choice =_c .NewCT_AxDataSourceChoice ();_fdbf ._gaa .Choice .NumRef =_c .NewCT_NumRef ();_fdbf ._gaa .Choice .NumRef .F =s ;};type DataLabels struct{_caa *_c .CT_DLbls };func (_dff CategoryAxis )SetMajorTickMark (m _c .ST_TickMark ){if m ==_c .ST_TickMarkUnset {_dff ._dd .MajorTickMark =nil ;
}else {_dff ._dd .MajorTickMark =_c .NewCT_TickMark ();_dff ._dd .MajorTickMark .ValAttr =m ;};};func (_gee DataLabels )SetShowPercent (b bool ){_gee .ensureChoice ();_gee ._caa .Choice .ShowPercent =_c .NewCT_Boolean ();_gee ._caa .Choice .ShowPercent .ValAttr =_f .Bool (b );
};

// AddScatterChart adds a scatter (X/Y) chart.
func (_efa Chart )AddScatterChart ()ScatterChart {_dfc :=_c .NewCT_PlotAreaChoice ();_efa ._agg .Chart .PlotArea .Choice =append (_efa ._agg .Chart .PlotArea .Choice ,_dfc );_dfc .ScatterChart =_c .NewCT_ScatterChart ();_fdbc :=ScatterChart {_dccf :_dfc .ScatterChart };
_fdbc .InitializeDefaults ();return _fdbc ;};

// SetText sets the series text.
func (_eb BarChartSeries )SetText (s string ){_eb ._ff .Tx =_c .NewCT_SerTx ();_eb ._ff .Tx .Choice .V =&s };

// AddBarChart adds a new bar chart to a chart.
func (_ba Chart )AddBarChart ()BarChart {_eeb :=_c .NewCT_PlotAreaChoice ();_ba ._agg .Chart .PlotArea .Choice =append (_ba ._agg .Chart .PlotArea .Choice ,_eeb );_eeb .BarChart =_c .NewCT_BarChart ();_eeb .BarChart .Grouping =_c .NewCT_BarGrouping ();
_eeb .BarChart .Grouping .ValAttr =_c .ST_BarGroupingStandard ;_da :=BarChart {_ag :_eeb .BarChart };_da .InitializeDefaults ();return _da ;};

// X returns the inner wrapped XML type.
func (_cff RadarChartSeries )X ()*_c .CT_RadarSer {return _cff ._dcc };

// SetText sets the series text
func (_dbg LineChartSeries )SetText (s string ){_dbg ._geea .Tx =_c .NewCT_SerTx ();_dbg ._geea .Tx .Choice .V =&s ;};func (_cde ValueAxis )SetPosition (p _c .ST_AxPos ){_cde ._cec .AxPos =_c .NewCT_AxPos ();_cde ._cec .AxPos .ValAttr =p ;};func (_cbbb DateAxis )MajorGridLines ()GridLines {if _cbbb ._gca .MajorGridlines ==nil {_cbbb ._gca .MajorGridlines =_c .NewCT_ChartLines ();
};return GridLines {_cbbb ._gca .MajorGridlines };};func (_abfb ValueAxis )MajorGridLines ()GridLines {if _abfb ._cec .MajorGridlines ==nil {_abfb ._cec .MajorGridlines =_c .NewCT_ChartLines ();};return GridLines {_abfb ._cec .MajorGridlines };};

// AddSeries adds a default series to an Pie chart.
func (_cdb PieChart )AddSeries ()PieChartSeries {_caag :=_c .NewCT_PieSer ();_cdb ._acf .Ser =append (_cdb ._acf .Ser ,_caag );_caag .Idx .ValAttr =uint32 (len (_cdb ._acf .Ser )-1);_caag .Order .ValAttr =uint32 (len (_cdb ._acf .Ser )-1);_efb :=PieChartSeries {_caag };
_efb .InitializeDefaults ();return _efb ;};

// X returns the inner wrapped XML type.
func (_agbd PieChart )X ()*_c .CT_PieChart {return _agbd ._acf };func (_defa Legend )InitializeDefaults (){_defa .SetPosition (_c .ST_LegendPosR );_defa .SetOverlay (false );_defa .Properties ().SetNoFill ();_defa .Properties ().LineProperties ().SetNoFill ();
};

// AddBubbleChart adds a new bubble chart.
func (_fcfd Chart )AddBubbleChart ()BubbleChart {_dcf :=_c .NewCT_PlotAreaChoice ();_fcfd ._agg .Chart .PlotArea .Choice =append (_fcfd ._agg .Chart .PlotArea .Choice ,_dcf );_dcf .BubbleChart =_c .NewCT_BubbleChart ();_bbe :=BubbleChart {_aeg :_dcf .BubbleChart };
_bbe .InitializeDefaults ();return _bbe ;};

// AddSeries adds a default series to a line chart.
func (_gaf Line3DChart )AddSeries ()LineChartSeries {_cfg :=_gaf .nextColor (len (_gaf ._ece .Ser ));_fbcd :=_c .NewCT_LineSer ();_gaf ._ece .Ser =append (_gaf ._ece .Ser ,_fbcd );_fbcd .Idx .ValAttr =uint32 (len (_gaf ._ece .Ser )-1);_fbcd .Order .ValAttr =uint32 (len (_gaf ._ece .Ser )-1);
_beb :=LineChartSeries {_fbcd };_beb .InitializeDefaults ();_beb .Properties ().LineProperties ().SetSolidFill (_cfg );_beb .Properties ().SetSolidFill (_cfg );return _beb ;};

// AddAxis adds an axis to a line chart.
func (_cg LineChart )AddAxis (axis Axis ){_acc :=_c .NewCT_UnsignedInt ();_acc .ValAttr =axis .AxisID ();_cg ._gdcb .AxId =append (_cg ._gdcb .AxId ,_acc );};func (_bdc CategoryAxis )InitializeDefaults (){_bdc .SetPosition (_c .ST_AxPosB );_bdc .SetMajorTickMark (_c .ST_TickMarkOut );
_bdc .SetMinorTickMark (_c .ST_TickMarkIn );_bdc .SetTickLabelPosition (_c .ST_TickLblPosNextTo );_bdc .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_cd .LightGray );_bdc .Properties ().LineProperties ().SetSolidFill (_cd .Black );};


// X returns the inner wrapped XML type.
func (_bcgc ValueAxis )X ()*_c .CT_ValAx {return _bcgc ._cec };func (_gge DateAxis )Properties ()_fd .ShapeProperties {if _gge ._gca .SpPr ==nil {_gge ._gca .SpPr =_d .NewCT_ShapeProperties ();};return _fd .MakeShapeProperties (_gge ._gca .SpPr );};

// AddDateAxis adds a value axis to the chart.
func (_cdad Chart )AddDateAxis ()DateAxis {_bcab :=_c .NewCT_DateAx ();if _cdad ._agg .Chart .PlotArea .CChoice ==nil {_cdad ._agg .Chart .PlotArea .CChoice =_c .NewCT_PlotAreaChoice1 ();};_bcab .AxId =_c .NewCT_UnsignedInt ();_bcab .AxId .ValAttr =0x7FFFFFFF&_fc .Uint32 ();
_cdad ._agg .Chart .PlotArea .CChoice .DateAx =append (_cdad ._agg .Chart .PlotArea .CChoice .DateAx ,_bcab );_bcab .Delete =_c .NewCT_Boolean ();_bcab .Delete .ValAttr =_f .Bool (false );_bcab .Scaling =_c .NewCT_Scaling ();_bcab .Scaling .Orientation =_c .NewCT_Orientation ();
_bcab .Scaling .Orientation .ValAttr =_c .ST_OrientationMinMax ;_bcab .Choice =&_c .EG_AxSharedChoice {};_bcab .Choice .Crosses =_c .NewCT_Crosses ();_bcab .Choice .Crosses .ValAttr =_c .ST_CrossesAutoZero ;_fdd :=DateAxis {_bcab };_fdd .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_cd .LightGray );
_fdd .SetMajorTickMark (_c .ST_TickMarkOut );_fdd .SetMinorTickMark (_c .ST_TickMarkIn );_fdd .SetTickLabelPosition (_c .ST_TickLblPosNextTo );_fdd .Properties ().LineProperties ().SetSolidFill (_cd .Black );_fdd .SetPosition (_c .ST_AxPosL );return _fdd ;
};

// SetValues sets values directly on a source.
func (_agb NumberDataSource )SetValues (v []float64 ){_agb .ensureChoice ();_agb ._dee .Choice .NumRef =nil ;_agb ._dee .Choice .NumLit =_c .NewCT_NumData ();_agb ._dee .Choice .NumLit .PtCount =_c .NewCT_UnsignedInt ();_agb ._dee .Choice .NumLit .PtCount .ValAttr =uint32 (len (v ));
for _eee ,_fgba :=range v {_agb ._dee .Choice .NumLit .Pt =append (_agb ._dee .Choice .NumLit .Pt ,&_c .CT_NumVal {IdxAttr :uint32 (_eee ),V :_cf .Sprintf ("\u0025\u0067",_fgba )});};};func (_fdgc SurfaceChartSeries )Values ()NumberDataSource {if _fdgc ._fcdb .Val ==nil {_fdgc ._fcdb .Val =_c .NewCT_NumDataSource ();
};_bf :=MakeNumberDataSource (_fdgc ._fcdb .Val );_bf .CreateEmptyNumberCache ();return _bf ;};

// AddLegend adds a legend to a chart, replacing any existing legend.
func (_dea Chart )AddLegend ()Legend {_dea ._agg .Chart .Legend =_c .NewCT_Legend ();_eba :=MakeLegend (_dea ._agg .Chart .Legend );_eba .InitializeDefaults ();return _eba ;};

// Properties returns the line chart series shape properties.
func (_fad ScatterChartSeries )Properties ()_fd .ShapeProperties {if _fad ._aedc .SpPr ==nil {_fad ._aedc .SpPr =_d .NewCT_ShapeProperties ();};return _fd .MakeShapeProperties (_fad ._aedc .SpPr );};